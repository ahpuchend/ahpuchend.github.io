<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AIdreamer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ahpuchend.github.io/"/>
  <updated>2019-11-22T09:49:54.676Z</updated>
  <id>https://ahpuchend.github.io/</id>
  
  <author>
    <name>ahpudong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法分析之贪心</title>
    <link href="https://ahpuchend.github.io/2019/11/20/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B9%8B%E8%B4%AA%E5%BF%83/"/>
    <id>https://ahpuchend.github.io/2019/11/20/算法分析之贪心/</id>
    <published>2019-11-20T07:32:51.000Z</published>
    <updated>2019-11-22T09:49:54.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="活动安排"><a href="#活动安排" class="headerlink" title="活动安排"></a>活动安排</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h2><h2 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h2><h2 id="huffman编码"><a href="#huffman编码" class="headerlink" title="huffman编码"></a>huffman编码</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;活动安排&quot;&gt;&lt;a href=&quot;#活动安排&quot; class=&quot;headerlink&quot; title=&quot;活动安排&quot;&gt;&lt;/a&gt;活动安排&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://ahpuchend.github.io/categories/algorithm/"/>
    
    
      <category term="贪心" scheme="https://ahpuchend.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>算法分析之动态规划</title>
    <link href="https://ahpuchend.github.io/2019/11/18/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://ahpuchend.github.io/2019/11/18/算法分析之动态规划/</id>
    <published>2019-11-18T14:39:13.000Z</published>
    <updated>2019-11-24T07:26:38.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切割钢条"><a href="#切割钢条" class="headerlink" title="切割钢条"></a>切割钢条</h2><h3 id="递推实现"><a href="#递推实现" class="headerlink" title="递推实现"></a>递推实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX = 100;</span><br><span class="line">int r[MAX];</span><br><span class="line">int p[MAX];</span><br><span class="line">void cutRod(int r[], int n) &#123;</span><br><span class="line">int i, j;</span><br><span class="line">p[1] = r[1];</span><br><span class="line">for (i = 2; i &lt;= n; ++i) &#123;</span><br><span class="line">p[i] = r[i];</span><br><span class="line">for (j = 1; j &lt; i; ++j) &#123;</span><br><span class="line">p[i] = max(p[i], p[i - j] + p[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">while (cin &gt;&gt; n) &#123;</span><br><span class="line">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">cin &gt;&gt; r[i];</span><br><span class="line">&#125;</span><br><span class="line">int K;</span><br><span class="line">cin &gt;&gt; K;</span><br><span class="line">cutRod(r, K);</span><br><span class="line">cout &lt;&lt; p[K];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="递归-备忘录"><a href="#递归-备忘录" class="headerlink" title="递归+备忘录"></a>递归+备忘录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX = 100;</span><br><span class="line">int r[MAX];</span><br><span class="line">int p[MAX];</span><br><span class="line">int cutRod(int r[], int k) &#123;</span><br><span class="line">    //备忘录</span><br><span class="line">if (p[k] != -1) &#123;</span><br><span class="line">return p[k];</span><br><span class="line">&#125;</span><br><span class="line">if (k == 1) &#123;</span><br><span class="line">p[k] = r[k];</span><br><span class="line">return p[k];</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">p[k] = r[k];</span><br><span class="line">for (int i = 1; i &lt; k; ++i) &#123;</span><br><span class="line">p[k] = max(p[k], p[i] + cutRod(r,k - i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">while (cin &gt;&gt; n) &#123;</span><br><span class="line">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">p[i] = -1;</span><br><span class="line">cin &gt;&gt; r[i];</span><br><span class="line">&#125;</span><br><span class="line">int K;</span><br><span class="line">cin &gt;&gt; K;</span><br><span class="line">cutRod(r, K);</span><br><span class="line">for (int i = 1; i &lt;= K; ++i) &#123;</span><br><span class="line">cout &lt;&lt; p[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求出切割一种最优的切割方案"><a href="#求出切割一种最优的切割方案" class="headerlink" title="求出切割一种最优的切割方案"></a>求出切割一种最优的切割方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//钢条切割</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX = 100;</span><br><span class="line">int r[MAX];</span><br><span class="line">int p[MAX];</span><br><span class="line">int s[MAX];</span><br><span class="line">int cutRod(int r[], int k) &#123;</span><br><span class="line">if (p[k] != -1) &#123;</span><br><span class="line">return p[k];</span><br><span class="line">&#125;</span><br><span class="line">if (k == 1) &#123;</span><br><span class="line">p[k] = r[k];</span><br><span class="line">return p[k];</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">p[k] = r[k];</span><br><span class="line">for (int i = 1; i &lt; k; ++i) &#123;</span><br><span class="line">if (p[k] &lt; cutRod(r, k - i)+p[i]) &#123;</span><br><span class="line">p[k] = p[i] + cutRod(r, k - i);</span><br><span class="line">s[k] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">while (cin &gt;&gt; n) &#123;</span><br><span class="line">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">s[i] = 0;</span><br><span class="line">p[i] = -1;</span><br><span class="line">cin &gt;&gt; r[i];</span><br><span class="line">&#125;</span><br><span class="line">int K;</span><br><span class="line">cin &gt;&gt; K;</span><br><span class="line">cutRod(r, K);</span><br><span class="line">cout &lt;&lt; p[K] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s[K] &lt;&lt;&quot; , &quot;&lt;&lt; K - s[K] &lt;&lt; endl;</span><br><span class="line">for (int i = 1; i &lt;= K; ++i) &#123;</span><br><span class="line">cout &lt;&lt; p[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; s[i] &lt;&lt; &quot; , &quot; &lt;&lt; i - s[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大字段和"><a href="#最大字段和" class="headerlink" title="最大字段和"></a>最大字段和</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//最大字段和</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;int&gt; a;</span><br><span class="line">int MaxLenSeq(int *T,int n) &#123;</span><br><span class="line">int maxLen;</span><br><span class="line">if (n == 0)&#123;</span><br><span class="line">a.push_back(T[n]);</span><br><span class="line">return T[n];</span><br><span class="line">&#125;</span><br><span class="line">maxLen = MaxLenSeq(T, n - 1);</span><br><span class="line">maxLen = max(maxLen+ T[n], T[n]);</span><br><span class="line">a.push_back(maxLen);</span><br><span class="line">return maxLen;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int T[] = &#123; -2,11,-4,13,-5,-2&#125;;</span><br><span class="line">int maxLen=MaxLenSeq(T, 5);</span><br><span class="line">auto  max = max_element(a.begin(), a.end());</span><br><span class="line">cout &lt;&lt; * max &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a.size() &lt;&lt; endl;</span><br><span class="line">for (vector&lt;int&gt;::iterator iter = a.begin(); iter != a.end(); iter++)&#123;</span><br><span class="line">cout &lt;&lt; (*iter)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h2><h3 id="法一：递归求解，时间复杂度为-O-2-n"><a href="#法一：递归求解，时间复杂度为-O-2-n" class="headerlink" title="法一：递归求解，时间复杂度为 $O(2^n)$"></a>法一：递归求解，时间复杂度为 $O(2^n)$</h3><p><b>这里的时间复杂度由递归的重复计算产生</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;random&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX = 101;</span><br><span class="line">int D[MAX][MAX];</span><br><span class="line">int n;</span><br><span class="line">int MaxSum(int i, int j) &#123;</span><br><span class="line">if (n == i)</span><br><span class="line">return D[i][j];</span><br><span class="line">int x = MaxSum(i + 1, j);</span><br><span class="line">int y = MaxSum(i + 1, j + 1);</span><br><span class="line">return max(x, y) + D[i][j];</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">random_device rd;</span><br><span class="line">uniform_int_distribution&lt;unsigned&gt; u(0, 9);</span><br><span class="line">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">for (int j = 1; j &lt;= i; ++j) &#123;</span><br><span class="line">D[i][j] = u(rd);</span><br><span class="line">cout &lt;&lt; D[i][j] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; MaxSum(1, 1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="法二-递归-备忘录"><a href="#法二-递归-备忘录" class="headerlink" title="法二: 递归+备忘录"></a>法二: 递归+备忘录</h3><p><b>消除了递归的重复计算</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//数字三角形 备忘录+分治</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;random&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX = 101;</span><br><span class="line">int D[MAX][MAX];</span><br><span class="line">int maxsum[MAX][MAX];</span><br><span class="line">int n;</span><br><span class="line">int MaxSum(int i, int j) &#123;</span><br><span class="line">if (maxsum[i][j] != -1) &#123;</span><br><span class="line">return maxsum[i][j];</span><br><span class="line">&#125;</span><br><span class="line">if (n == i)</span><br><span class="line">maxsum[i][j] = D[i][j];</span><br><span class="line">else &#123;</span><br><span class="line">int x = MaxSum(i + 1, j);</span><br><span class="line">int y = MaxSum(i + 1, j + 1);</span><br><span class="line">maxsum[i][j] = max(x, y) + D[i][j];</span><br><span class="line">&#125;</span><br><span class="line">return maxsum[i][j];</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">random_device rd;</span><br><span class="line">uniform_int_distribution&lt;unsigned&gt; u(0, 9);</span><br><span class="line">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">for (int j = 1; j &lt;= i; ++j) &#123;</span><br><span class="line">D[i][j] = u(rd);</span><br><span class="line">cout &lt;&lt; D[i][j] &lt;&lt; &quot; &quot;;</span><br><span class="line">maxsum[i][j] = -1;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; MaxSum(1, 1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX = 100;</span><br><span class="line">int maxlen[MAX];</span><br><span class="line">void MaxLen(int a[],int n) &#123;</span><br><span class="line">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">for (int j = 0; j &lt; i; ++j) &#123;</span><br><span class="line">if (a[i] &gt; a[j]) &#123;</span><br><span class="line">maxlen[i] = max(maxlen[j] + 1, maxlen[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">int a[] = &#123; 1,7,3,5,9,4,8,9,10,11&#125;;</span><br><span class="line">for (int i = 0; i &lt;= n; ++i) &#123;</span><br><span class="line">maxlen[i] = 1;</span><br><span class="line">&#125;</span><br><span class="line">MaxLen(a, n);</span><br><span class="line">cout &lt;&lt; *max_element(maxlen, maxlen + n + 1) &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共子序列（LCS）"><a href="#最长公共子序列（LCS）" class="headerlink" title="最长公共子序列（LCS）"></a>最长公共子序列（LCS）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX = 100;</span><br><span class="line">char str1[MAX];</span><br><span class="line">char str2[MAX];</span><br><span class="line">int c[MAX][MAX];</span><br><span class="line">int main() &#123;</span><br><span class="line">while (cin &gt;&gt; str1 &gt;&gt; str2) &#123;</span><br><span class="line">int len1 = strlen(str1);</span><br><span class="line">int len2 = strlen(str2);</span><br><span class="line">int i, j;</span><br><span class="line">for (i = 0; i &lt;= len1; ++i) &#123;</span><br><span class="line">c[i][0] = 0;</span><br><span class="line">&#125;</span><br><span class="line">for (j = 0; j &lt;= len2; ++j) &#123;</span><br><span class="line">c[0][j] = 0;</span><br><span class="line">&#125;</span><br><span class="line">for (i = 1; i &lt;= len1; ++i) &#123;</span><br><span class="line">for (j = 1; j &lt;= len2; ++j) &#123;</span><br><span class="line">if (str1[i - 1] == str2[j - 1])</span><br><span class="line">c[i][j] = c[i - 1][j - 1] + 1;</span><br><span class="line">else</span><br><span class="line">c[i][j] = max(c[i][j - 1], c[i - 1][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; c[len1][len2] &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵链乘"><a href="#矩阵链乘" class="headerlink" title="矩阵链乘"></a>矩阵链乘</h2><h3 id="自底向上-递推式"><a href="#自底向上-递推式" class="headerlink" title="自底向上-递推式"></a>自底向上-递推式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAX = 101;</span><br><span class="line">const int INF = 999999;</span><br><span class="line">int m[MAX][MAX];</span><br><span class="line">int s[MAX][MAX];</span><br><span class="line">void matrix_chain_multipy(int p[],int n) &#123;</span><br><span class="line">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class="line">m[i][i] = 0;</span><br><span class="line">&#125;</span><br><span class="line">//表示矩阵链A[i]A[i+1]...A[j]的长度，采用自底向上的方法</span><br><span class="line">for (int l = 2; l &lt;= n; ++l) &#123;</span><br><span class="line">//i表示A[i]A[i+1]....A[j]的（开始位置</span><br><span class="line">for (int i = 1; i &lt;= n - l + 1; ++i) &#123;</span><br><span class="line">//j表示A[i]A[i+1]....A[j]的）结束位置</span><br><span class="line">int j = i + l - 1;</span><br><span class="line">m[i][j] = INF;</span><br><span class="line">//用来对A[i]A[i+1]....A[j]在位置k处分割</span><br><span class="line">for (int k = i; k &lt;= j - 1;++k) &#123;</span><br><span class="line">int q = m[i][k] + m[k + 1][j] + p[i - 1]*p[k]*p[j];</span><br><span class="line">if (q &lt; m[i][j]) &#123;</span><br><span class="line">m[i][j] = q;</span><br><span class="line">s[i][j] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void print_optimal_parens(int s[][MAX],int i, int j) &#123;</span><br><span class="line">if (i == j) &#123;</span><br><span class="line">cout &lt;&lt;&quot;A&quot;&lt;&lt;i;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; &quot;(&quot;;</span><br><span class="line">print_optimal_parens(s, i, s[i][j]);</span><br><span class="line">print_optimal_parens(s, s[i][j] + 1, j);</span><br><span class="line">cout &lt;&lt; &quot;)&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int p[MAX];</span><br><span class="line">int len;</span><br><span class="line">while (cin &gt;&gt; len) &#123;</span><br><span class="line">for (int i = 0; i &lt; len; ++i) &#123;</span><br><span class="line">cin &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line">matrix_chain_multipy(p, len-1);</span><br><span class="line">int i, j;</span><br><span class="line">cout &lt;&lt; m[1][6] &lt;&lt; endl;</span><br><span class="line">print_optimal_parens(s, 1, 6);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自顶向下-备忘录"><a href="#自顶向下-备忘录" class="headerlink" title="自顶向下+备忘录"></a>自顶向下+备忘录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h2><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int NMax = 100;</span><br><span class="line">const int WMax = 3000;</span><br><span class="line">const int VMax = 100;</span><br><span class="line">int m[NMax][WMax];</span><br><span class="line">int values[NMax];</span><br><span class="line">int weight[NMax];</span><br><span class="line">int main() &#123;</span><br><span class="line">int N, W;</span><br><span class="line">while (cin &gt;&gt; N &gt;&gt; W) &#123;</span><br><span class="line">for (int n = 1; n &lt;= N; ++n) &#123;</span><br><span class="line">cin &gt;&gt; weight[n] &gt;&gt; values[n];</span><br><span class="line">&#125;</span><br><span class="line">for (int n = 0; n &lt;= N; ++n) &#123;</span><br><span class="line">m[n][0] = 0;</span><br><span class="line">&#125;</span><br><span class="line">for (int w = 0; w &lt;= W; ++w) &#123;</span><br><span class="line">m[0][w] = 0;</span><br><span class="line">&#125;</span><br><span class="line">for (int n = 1; n &lt;= N; ++n) &#123;</span><br><span class="line">for (int w = 1; w &lt;= W; ++w) &#123;</span><br><span class="line">if (weight[n] &gt; w) &#123;</span><br><span class="line">m[n][w] = m[n - 1][w];</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">m[n][w] = max(m[n - 1][w], m[n - 1][w - weight[n]] + values[n]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; m[N][W] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最优二分搜索树"><a href="#最优二分搜索树" class="headerlink" title="最优二分搜索树"></a>最优二分搜索树</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;切割钢条&quot;&gt;&lt;a href=&quot;#切割钢条&quot; class=&quot;headerlink&quot; title=&quot;切割钢条&quot;&gt;&lt;/a&gt;切割钢条&lt;/h2&gt;&lt;h3 id=&quot;递推实现&quot;&gt;&lt;a href=&quot;#递推实现&quot; class=&quot;headerlink&quot; title=&quot;递推实现&quot;&gt;&lt;/a&gt;递推实现&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const int MAX = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int r[MAX];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int p[MAX];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void cutRod(int r[], int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int i, j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p[1] = r[1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (i = 2; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p[i] = r[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for (j = 1; j &amp;lt; i; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p[i] = max(p[i], p[i - j] + p[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	while (cin &amp;gt;&amp;gt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cin &amp;gt;&amp;gt; r[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int K;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cin &amp;gt;&amp;gt; K;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cutRod(r, K);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cout &amp;lt;&amp;lt; p[K];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://ahpuchend.github.io/categories/algorithm/"/>
    
    
      <category term="dp" scheme="https://ahpuchend.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>算法分析之递归和分治</title>
    <link href="https://ahpuchend.github.io/2019/11/18/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B9%8B%E9%80%92%E5%BD%92%E5%92%8C%E5%88%86%E6%B2%BB/"/>
    <id>https://ahpuchend.github.io/2019/11/18/算法分析之递归和分治/</id>
    <published>2019-11-18T14:22:51.000Z</published>
    <updated>2019-11-18T14:29:41.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法分析期末复习题"><a href="#算法分析期末复习题" class="headerlink" title="算法分析期末复习题"></a>算法分析期末复习题</h1><h2 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1. 插入排序"></a>1. 插入排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void InsertSort(vector &lt;int&gt; T, int len) &#123;</span><br><span class="line">for (int i = 1; i &lt; len; ++i) &#123;</span><br><span class="line">int key = T[i];</span><br><span class="line">int j = i - 1;</span><br><span class="line">while (j &gt;= 0 &amp;&amp; T[j] &gt; key ) &#123;</span><br><span class="line">T[j + 1] = T[j];</span><br><span class="line">j = j - 1;</span><br><span class="line">&#125;</span><br><span class="line">T[j+1] = key;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; T.size(); ++i)</span><br><span class="line">cout &lt;&lt; T[i] &lt;&lt; &quot;,&quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main(void) &#123;</span><br><span class="line">vector &lt;int&gt; v = &#123;10,3,4,5,6,8,9,7,2,1,100,300,200&#125;;</span><br><span class="line">cout &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line">InsertSort(v, v.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-快排"><a href="#2-快排" class="headerlink" title="2. 快排"></a>2. 快排</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">int Paritition1(int A[], int low, int high) &#123;</span><br><span class="line">int pivot = A[low];</span><br><span class="line">while (low &lt; high) &#123;</span><br><span class="line">while (low &lt; high &amp;&amp; A[high] &gt;= pivot) &#123;</span><br><span class="line">--high;</span><br><span class="line">&#125;</span><br><span class="line">A[low] = A[high];</span><br><span class="line">while (low &lt; high &amp;&amp; A[low] &lt;= pivot) &#123;</span><br><span class="line">++low;</span><br><span class="line">&#125;</span><br><span class="line">A[high] = A[low];</span><br><span class="line">&#125;</span><br><span class="line">A[low] = pivot;</span><br><span class="line">//每轮结果显示</span><br><span class="line">for (int i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">std::cout &lt;&lt; A[i] &lt;&lt; &quot;,&quot;;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">return low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void QuickSort(int A[], int low, int high)</span><br><span class="line">&#123;</span><br><span class="line">if (low &lt; high) &#123;</span><br><span class="line">int pivot = Paritition1(A, low, high);</span><br><span class="line">QuickSort(A, low, pivot - 1);</span><br><span class="line">QuickSort(A, pivot + 1, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int A[10] = &#123; 1,9,8,5,3,4,2,7,6,10 &#125;;</span><br><span class="line">QuickSort(A, 0, 9);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-顺序统计量（n个数中找打前m大的数字）"><a href="#3-顺序统计量（n个数中找打前m大的数字）" class="headerlink" title="3. 顺序统计量（n个数中找打前m大的数字）"></a>3. 顺序统计量（n个数中找打前m大的数字）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int Partition(int T[],int low,int high) &#123;</span><br><span class="line">int pivot = T[low];</span><br><span class="line">while (low &lt; high) &#123;</span><br><span class="line">while (low&lt;high &amp;&amp; T[high]&gt;pivot) --high;</span><br><span class="line">T[low] = T[high];</span><br><span class="line">while (low &lt; high &amp;&amp; T[low] &lt; pivot) ++low;</span><br><span class="line">T[high] = T[low];</span><br><span class="line">&#125;</span><br><span class="line">T[low] = pivot;//or T[right]=pivot</span><br><span class="line">return low;</span><br><span class="line">&#125;</span><br><span class="line">int arrangeRight(int T[], int low, int high,int K) &#123;</span><br><span class="line">int end = high, start = low;</span><br><span class="line">low = Partition(T, low, high);</span><br><span class="line">int num = end - low + 1;</span><br><span class="line">if (num == K)</span><br><span class="line">return low;</span><br><span class="line">else if (num &gt; K)</span><br><span class="line">arrangeRight(T, low + 1, end, K);</span><br><span class="line">else if (end - low + 1 &lt; K)</span><br><span class="line">arrangeRight(T, start, low - 1, K - num);</span><br><span class="line">&#125;</span><br><span class="line">void PrintResult(int T[],int low,int high) &#123;</span><br><span class="line">for (int i = low; i &lt;= high; ++i)</span><br><span class="line">cout &lt;&lt; T[i] &lt;&lt;&quot;,&quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void QuickSort(int T[], int low, int high) &#123;</span><br><span class="line">if (low &lt; high) &#123;</span><br><span class="line">int p = Partition(T, low, high);</span><br><span class="line">QuickSort(T, low, p-1);</span><br><span class="line">QuickSort(T, p + 1, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int T[15] = &#123; 6,8,1,3,5,7,4,2,9,10,15,12,11,13,14 &#125;;</span><br><span class="line">int low = 0, high = 14, K = 3;</span><br><span class="line">int p = arrangeRight(T, low, high, K);</span><br><span class="line">QuickSort(T, p, high);</span><br><span class="line">PrintResult(T, p, high);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-二路归并排序"><a href="#4-二路归并排序" class="headerlink" title="4. 二路归并排序"></a>4. 二路归并排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void merge(int List[], int low, int mid, int high)&#123;</span><br><span class="line">//low为第1有序区的第1个元素,mid+1为第2有序区第1个元素且为第1有序区的最后1个元素</span><br><span class="line">int i = low;</span><br><span class="line">//j 指向第 2 有序区的第 1 个元素，high 为第 2 有序区的最后一个元素</span><br><span class="line">int j = mid + 1;</span><br><span class="line">//temp数组暂存合并的有序序列</span><br><span class="line">int* temp = new int[high - low + 1];</span><br><span class="line">//设置临时数组的指示标志 k</span><br><span class="line">int k = 0;</span><br><span class="line">//内存分配失败</span><br><span class="line">if (!temp) &#123;</span><br><span class="line">cout &lt;&lt; &quot;数组分配失败！&quot;;</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">//顺序选取两个有序区的较小元素，存储到t数组中，因为是递增排序</span><br><span class="line">while (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">//较小的元素，存入temp临时数组中</span><br><span class="line">if (List[i] &lt;= List[j]) &#123;</span><br><span class="line">temp[k++] = List[i++];</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">temp[k++] = List[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//比完之后，假如第1个有序区仍有剩余，则直接全部复制到 temp 数组</span><br><span class="line">while (i &lt;= mid) &#123;</span><br><span class="line">temp[k++] = List[i++];</span><br><span class="line">&#125;</span><br><span class="line">//比完之后，假如第2个有序区还有剩余，则直接全部复制到 temp 数组</span><br><span class="line">while (j &lt;= high) &#123;</span><br><span class="line">temp[k++] = List[j++];</span><br><span class="line">&#125;</span><br><span class="line">//将排好序的序列，重存回到 list 中 low 到 high 区间</span><br><span class="line">for (i = low, k = 0; i &lt;= high; i++, k++) &#123;</span><br><span class="line">List[i] = temp[k];</span><br><span class="line">&#125;</span><br><span class="line">delete[]temp;</span><br><span class="line">&#125;</span><br><span class="line">void mergeSort(int List[], int low, int high)&#123;</span><br><span class="line">int mid = (low + high) / 2;</span><br><span class="line">if (low &lt; high)&#123;</span><br><span class="line">mergeSort(List, low, mid);</span><br><span class="line">mergeSort(List, mid + 1, high);</span><br><span class="line">merge(List, low, mid, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">int source[10] = &#123;1,9,8,5,3,4,2,7,6,10&#125;;</span><br><span class="line">mergeSort(source, 0, 9);</span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">cout &lt;&lt; source[i] &lt;&lt; &apos;,&apos;;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-逆序对数"><a href="#5-逆序对数" class="headerlink" title="5. 逆序对数"></a>5. 逆序对数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">static int totalpairs = 0;</span><br><span class="line">void StatisticNumpair(int T[], int low, int mid, int high) &#123;</span><br><span class="line">int s = low,m = mid+1;</span><br><span class="line">int* temp = new int[high - low + 1];</span><br><span class="line">int k = 0;</span><br><span class="line">while (s &lt;= mid &amp;&amp; m &lt;= high) &#123;</span><br><span class="line">if (T[m] &lt; T[s]) &#123;</span><br><span class="line">temp[k++] = T[m++];</span><br><span class="line">totalpairs += mid - s+1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">temp[k++] = T[s++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while (s &lt;= mid) &#123;</span><br><span class="line">temp[k++] = T[s++];</span><br><span class="line">&#125;</span><br><span class="line">while (m &lt;= high) &#123;</span><br><span class="line">temp[k++] = T[m++];</span><br><span class="line">&#125;</span><br><span class="line">// 这个复制特别重要,不可写成</span><br><span class="line">//for (int i = low; i &lt;= high; i++)</span><br><span class="line">//T[i] = temp[k];</span><br><span class="line"></span><br><span class="line">for (int i = low, k = 0; i &lt;= high; i++, k++) &#123;</span><br><span class="line">T[i] = temp[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delete[] temp;</span><br><span class="line">&#125;</span><br><span class="line">void ReverseNumpair(int T[],int low,int high) &#123;</span><br><span class="line">int mid = (low + high) / 2;</span><br><span class="line">if (low &lt; high) &#123;</span><br><span class="line">ReverseNumpair(T, low, mid);</span><br><span class="line">ReverseNumpair(T, mid + 1, high);</span><br><span class="line">StatisticNumpair(T, low, mid, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int T[9] = &#123; 15,2,6,3,4,5,1,11,10&#125;;</span><br><span class="line">ReverseNumpair(T, 0, 8);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; totalpairs &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt;= 8; ++i) &#123;</span><br><span class="line">cout &lt;&lt; T[i] &lt;&lt; &quot;,&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-最大，最小元"><a href="#6-最大，最小元" class="headerlink" title="6. 最大，最小元"></a>6. 最大，最小元</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void minmax(int* a, int i, int j, int* min, int* max) &#123;</span><br><span class="line">int lmin, lmax, rmin, rmax, mid;</span><br><span class="line">if (i == j) &#123;</span><br><span class="line">*min = a[i];</span><br><span class="line">*max = a[j];</span><br><span class="line">&#125;</span><br><span class="line">else if (j == i + 1) &#123;</span><br><span class="line">if (a[i] &gt; a[j]) &#123;</span><br><span class="line">*min = a[j];</span><br><span class="line">*max = a[i];</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">*min = a[i];</span><br><span class="line">*max = a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">mid = (i + j) / 2;</span><br><span class="line">minmax(a, i, mid, &amp;lmin, &amp;lmax);</span><br><span class="line">minmax(a, mid + 1, j, &amp;rmin, &amp;rmax);</span><br><span class="line">*min = (lmin &gt; rmin) ? rmin : lmin;</span><br><span class="line">*max = (lmax &gt; rmax) ? lmax : rmax;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int a[] = &#123; 6,10,32,8,19,20,2,100,14 &#125;;</span><br><span class="line">int min, max;</span><br><span class="line">minmax(a, 0, 8, &amp;min, &amp;max);</span><br><span class="line">cout &lt;&lt; &quot;min:&quot; &lt;&lt; min &lt;&lt;&quot; &quot;&lt;&lt; &quot;max:&quot; &lt;&lt; max &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-汉诺塔"><a href="#7-汉诺塔" class="headerlink" title="7. 汉诺塔"></a>7. 汉诺塔</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void Hanoi(int n,char src,char mid, char dest)&#123;</span><br><span class="line">if (n == 1) &#123;</span><br><span class="line">cout &lt;&lt; src &lt;&lt; &quot;--&gt;&quot; &lt;&lt; dest &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">Hanoi(n - 1, src, dest, mid);</span><br><span class="line">cout &lt;&lt; src &lt;&lt; &quot;--&gt;&quot; &lt;&lt; dest &lt;&lt; endl;</span><br><span class="line">Hanoi(n - 1, mid, src, dest);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">Hanoi(n, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-正整数幂乘-a的n次方"><a href="#8-正整数幂乘-a的n次方" class="headerlink" title="8. 正整数幂乘(a的n次方)"></a>8. 正整数幂乘(a的n次方)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//法一：</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int calc(int a, int n)&#123;</span><br><span class="line">if (n == 1)</span><br><span class="line">return a;</span><br><span class="line">if (n % 2 == 0)</span><br><span class="line">a = pow(calc(a, n / 2),2);</span><br><span class="line">else</span><br><span class="line">a = pow(calc(a, (n - 1) / 2),2)*a;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int a, n;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; n;</span><br><span class="line">a = calc(a, n);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//法二：</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long long quickpower(long long x, long long y)&#123;</span><br><span class="line">long long ans = 1, cnt = x;</span><br><span class="line">while (y)&#123;</span><br><span class="line">if (y &amp; 1)&#123;</span><br><span class="line">ans *= cnt;</span><br><span class="line">&#125;</span><br><span class="line">cnt *= cnt;</span><br><span class="line">y &gt;&gt;= 1;</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">long long x, y, ans;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">ans = quickpower(x, y);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-Fibonacci数列"><a href="#9-Fibonacci数列" class="headerlink" title="9. Fibonacci数列"></a>9. Fibonacci数列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct matrix</span><br><span class="line">&#123;</span><br><span class="line">int m[2][2];</span><br><span class="line">&#125;ans,base;</span><br><span class="line"></span><br><span class="line">matrix multi(matrix a, matrix b) &#123;</span><br><span class="line">matrix temp;</span><br><span class="line">for (int i = 0; i &lt; 2; ++i) &#123;</span><br><span class="line">for (int j = 0; j &lt; 2; ++j) &#123;</span><br><span class="line">temp.m[i][j] = 0;</span><br><span class="line">for (int k = 0; k &lt; 2; ++k) &#123;</span><br><span class="line">temp.m[i][j] += a.m[i][k] * b.m[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return temp;</span><br><span class="line">&#125;</span><br><span class="line">int fabonacci(int n) &#123;</span><br><span class="line">base.m[0][0] = base.m[0][1] = base.m[1][0] = 1;</span><br><span class="line">base.m[1][1] = 0;</span><br><span class="line">ans.m[0][0] = ans.m[1][1] = 1;</span><br><span class="line">ans.m[0][1] = ans.m[1][0] = 0;</span><br><span class="line">while (n) &#123;</span><br><span class="line">if (n &amp; 1) &#123;</span><br><span class="line">ans = multi(ans, base);</span><br><span class="line">&#125;</span><br><span class="line">base = multi(base, base);</span><br><span class="line">n &gt;&gt;= 1;</span><br><span class="line">&#125;</span><br><span class="line">return ans.m[1][0] + ans.m[1][1];</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">while (cin &gt;&gt; n) &#123;</span><br><span class="line">int result = fabonacci(n);</span><br><span class="line">cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-整数的划分"><a href="#10-整数的划分" class="headerlink" title="10. 整数的划分"></a>10. 整数的划分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int equationCount(int n, int m)&#123;</span><br><span class="line">if (n == 1 || m == 1)</span><br><span class="line">return 1;</span><br><span class="line">else if (n &lt; m)</span><br><span class="line">return equationCount(n, n);</span><br><span class="line">else if (n == m)</span><br><span class="line">return 1 + equationCount(n, n - 1);</span><br><span class="line">else</span><br><span class="line">return equationCount(n, m - 1) + equationCount(n - m, m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">int n;</span><br><span class="line">while (cin&gt;&gt;n)&#123;</span><br><span class="line">cout&lt;&lt;equationCount(n, n)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;算法分析期末复习题&quot;&gt;&lt;a href=&quot;#算法分析期末复习题&quot; class=&quot;headerlink&quot; title=&quot;算法分析期末复习题&quot;&gt;&lt;/a&gt;算法分析期末复习题&lt;/h1&gt;&lt;h2 id=&quot;1-插入排序&quot;&gt;&lt;a href=&quot;#1-插入排序&quot; class=&quot;headerlink&quot; title=&quot;1. 插入排序&quot;&gt;&lt;/a&gt;1. 插入排序&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void InsertSort(vector &amp;lt;int&amp;gt; T, int len) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (int i = 1; i &amp;lt; len; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int key = T[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int j = i - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		while (j &amp;gt;= 0 &amp;amp;&amp;amp; T[j] &amp;gt; key ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			T[j + 1] = T[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			j = j - 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		T[j+1] = key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	for (int i = 0; i &amp;lt; T.size(); ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cout &amp;lt;&amp;lt; T[i] &amp;lt;&amp;lt; &amp;quot;,&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cout &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(void) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vector &amp;lt;int&amp;gt; v = &amp;#123;10,3,4,5,6,8,9,7,2,1,100,300,200&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cout &amp;lt;&amp;lt; v.size() &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	InsertSort(v, v.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://ahpuchend.github.io/categories/algorithm/"/>
    
    
      <category term="分治" scheme="https://ahpuchend.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ahpuchend.github.io/2019/11/18/%E5%A4%A7%E6%95%B0%E5%8A%A0%E6%B3%95%E5%92%8C%E4%B9%98%E6%B3%95/"/>
    <id>https://ahpuchend.github.io/2019/11/18/大数加法和乘法/</id>
    <published>2019-11-17T17:23:15.514Z</published>
    <updated>2019-11-17T17:23:15.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大整数加法和大整数乘法"><a href="#大整数加法和大整数乘法" class="headerlink" title="大整数加法和大整数乘法"></a>大整数加法和大整数乘法</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;大整数加法和大整数乘法&quot;&gt;&lt;a href=&quot;#大整数加法和大整数乘法&quot; class=&quot;headerlink&quot; title=&quot;大整数加法和大整数乘法&quot;&gt;&lt;/a&gt;大整数加法和大整数乘法&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pandas 常用操作</title>
    <link href="https://ahpuchend.github.io/2019/10/26/pandas-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://ahpuchend.github.io/2019/10/26/pandas-常用操作/</id>
    <published>2019-10-26T13:38:18.000Z</published>
    <updated>2019-11-16T11:53:32.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-从txt-文件或者excel文件中读取数据"><a href="#1-从txt-文件或者excel文件中读取数据" class="headerlink" title="1. 从txt 文件或者excel文件中读取数据"></a>1. 从txt 文件或者excel文件中读取数据</h2><h2 id="2-把数据存入mysql数据库"><a href="#2-把数据存入mysql数据库" class="headerlink" title="2. 把数据存入mysql数据库"></a>2. 把数据存入mysql数据库</h2><h2 id="3-再已经建好的DataFrame中增加新列"><a href="#3-再已经建好的DataFrame中增加新列" class="headerlink" title="3. 再已经建好的DataFrame中增加新列"></a>3. 再已经建好的DataFrame中增加新列</h2><h2 id="4-修改原来的列名"><a href="#4-修改原来的列名" class="headerlink" title="4. 修改原来的列名"></a>4. 修改原来的列名</h2><h2 id="5-all-与-any"><a href="#5-all-与-any" class="headerlink" title="5. all() 与 any()"></a>5. all() 与 any()</h2><h2 id="6-Dataframe删除某些行后，对index重新按递增排序"><a href="#6-Dataframe删除某些行后，对index重新按递增排序" class="headerlink" title="6. Dataframe删除某些行后，对index重新按递增排序"></a>6. Dataframe删除某些行后，对index重新按递增排序</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.reset_index(drop=True)</span><br></pre></td></tr></table></figure><h2 id="7-怎么将DataFrame的多列合并为一列"><a href="#7-怎么将DataFrame的多列合并为一列" class="headerlink" title="7. 怎么将DataFrame的多列合并为一列"></a>7. 怎么将DataFrame的多列合并为一列</h2><h2 id="8-怎么讲读入的数字浮点类型转成字符串类型"><a href="#8-怎么讲读入的数字浮点类型转成字符串类型" class="headerlink" title="8. 怎么讲读入的数字浮点类型转成字符串类型"></a>8. 怎么讲读入的数字浮点类型转成字符串类型</h2><h2 id="9-padans去重（多行数据重复只保留一行）"><a href="#9-padans去重（多行数据重复只保留一行）" class="headerlink" title="9. padans去重（多行数据重复只保留一行）"></a>9. padans去重（多行数据重复只保留一行）</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-从txt-文件或者excel文件中读取数据&quot;&gt;&lt;a href=&quot;#1-从txt-文件或者excel文件中读取数据&quot; class=&quot;headerlink&quot; title=&quot;1. 从txt 文件或者excel文件中读取数据&quot;&gt;&lt;/a&gt;1. 从txt 文件或者excel文件中读取数据&lt;/h2&gt;&lt;h2 id=&quot;2-把数据存入mysql数据库&quot;&gt;&lt;a href=&quot;#2-把数据存入mysql数据库&quot; class=&quot;headerlink&quot; title=&quot;2. 把数据存入mysql数据库&quot;&gt;&lt;/a&gt;2. 把数据存入mysql数据库&lt;/h2&gt;&lt;h2 id=&quot;3-再已经建好的DataFrame中增加新列&quot;&gt;&lt;a href=&quot;#3-再已经建好的DataFrame中增加新列&quot; class=&quot;headerlink&quot; title=&quot;3. 再已经建好的DataFrame中增加新列&quot;&gt;&lt;/a&gt;3. 再已经建好的DataFrame中增加新列&lt;/h2&gt;&lt;h2 id=&quot;4-修改原来的列名&quot;&gt;&lt;a href=&quot;#4-修改原来的列名&quot; class=&quot;headerlink&quot; title=&quot;4. 修改原来的列名&quot;&gt;&lt;/a&gt;4. 修改原来的列名&lt;/h2&gt;&lt;h2 id=&quot;5-all-与-any&quot;&gt;&lt;a href=&quot;#5-all-与-any&quot; class=&quot;headerlink&quot; title=&quot;5. all() 与 any()&quot;&gt;&lt;/a&gt;5. all() 与 any()&lt;/h2&gt;&lt;h2 id=&quot;6-Dataframe删除某些行后，对index重新按递增排序&quot;&gt;&lt;a href=&quot;#6-Dataframe删除某些行后，对index重新按递增排序&quot; class=&quot;headerlink&quot; title=&quot;6. Dataframe删除某些行后，对index重新按递增排序&quot;&gt;&lt;/a&gt;6. Dataframe删除某些行后，对index重新按递增排序&lt;/h2&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://ahpuchend.github.io/categories/python/"/>
    
    
      <category term="pandas" scheme="https://ahpuchend.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>opencv入门</title>
    <link href="https://ahpuchend.github.io/2019/10/19/opencv%E5%85%A5%E9%97%A8/"/>
    <id>https://ahpuchend.github.io/2019/10/19/opencv入门/</id>
    <published>2019-10-19T08:27:29.000Z</published>
    <updated>2019-10-19T08:27:29.909Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>numpy入门</title>
    <link href="https://ahpuchend.github.io/2019/10/18/numpy%E5%85%A5%E9%97%A8/"/>
    <id>https://ahpuchend.github.io/2019/10/18/numpy入门/</id>
    <published>2019-10-18T13:03:38.000Z</published>
    <updated>2019-10-18T13:04:03.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-建立n维数组"><a href="#1-建立n维数组" class="headerlink" title="1.建立n维数组"></a>1.建立n维数组</h1><h2 id="1-1-常用方法"><a href="#1-1-常用方法" class="headerlink" title="1.1 常用方法"></a>1.1 常用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">np.random.random(())</span><br><span class="line">np.random.uniform()</span><br><span class="line">np.ones(())</span><br><span class="line">np.zeros(())</span><br><span class="line">np.arange().reshape()</span><br><span class="line">np.arange().resize()</span><br><span class="line">np.array([])</span><br><span class="line">np.empty()</span><br><span class="line">np.linspace()</span><br><span class="line">np.eys()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="1-2-其他方法"><a href="#1-2-其他方法" class="headerlink" title="1.2 其他方法"></a>1.2 其他方法</h2><p>np.empty_like()<br>np.fromfunction()</p><h1 id="2-多维数组基本属性"><a href="#2-多维数组基本属性" class="headerlink" title="2.多维数组基本属性"></a>2.多维数组基本属性</h1><h2 id="2-2-axis-介绍"><a href="#2-2-axis-介绍" class="headerlink" title="2.2 axis 介绍"></a>2.2 axis 介绍</h2><h2 id="2-3-基本属性"><a href="#2-3-基本属性" class="headerlink" title="2.3 基本属性"></a>2.3 基本属性</h2><p>ndim<br>shape<br>size<br>data<br>itemsize<br>dtype</p><h1 id="3-打印、索引、切片、迭代多维数组"><a href="#3-打印、索引、切片、迭代多维数组" class="headerlink" title="3.打印、索引、切片、迭代多维数组"></a>3.打印、索引、切片、迭代多维数组</h1><h2 id="3-1-打印与迭代"><a href="#3-1-打印与迭代" class="headerlink" title="3.1 打印与迭代"></a>3.1 打印与迭代</h2><p>for row in narr:<br>    print(row)</p><p>for i in narr.flag:<br>    print(i) </p><h2 id="3-2-切片与索引"><a href="#3-2-切片与索引" class="headerlink" title="3.2 切片与索引"></a>3.2 切片与索引</h2><p>以二维数组为例（即矩阵）<br>取特定数字<br>narr[i,j]<br>按行<br>narr[i] &lt;=&gt; narr[1,:]<br>按列<br>narr[,i] &lt;=&gt; narr[:,i]<br>按区域<br>narr[i:j,i:j]<br>特别地：<br>narr[i,…]语法糖说明:</p><p>再以三维数组为例（即矩阵）</p><h2 id="3-3-切片和索引的一些小技巧"><a href="#3-3-切片和索引的一些小技巧" class="headerlink" title="3.3 切片和索引的一些小技巧"></a>3.3 切片和索引的一些小技巧</h2><p><b>3.3.1 使用索引数组进行索引</b></p><p>例0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(5)</span><br><span class="line">&gt;&gt;a[[0,1,2]]</span><br><span class="line">array([0, 1, 2])</span><br><span class="line"></span><br><span class="line">a=np.arange(12).reshape(3,4)</span><br><span class="line">&gt;&gt;a</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[([0,1,2],[0,0,0])]</span><br><span class="line">array([0, 4, 8])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[np.array([0,1,2])]</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11]])</span><br><span class="line"></span><br><span class="line">i=np.array([[0,1,2],[0,0,0]])</span><br><span class="line">&gt;&gt;a[i]</span><br><span class="line">array([[[ 0,  1,  2,  3],</span><br><span class="line">        [ 4,  5,  6,  7],</span><br><span class="line">        [ 8,  9, 10, 11]],</span><br><span class="line"></span><br><span class="line">       [[ 0,  1,  2,  3],</span><br><span class="line">        [ 0,  1,  2,  3],</span><br><span class="line">        [ 0,  1,  2,  3]]])</span><br><span class="line"></span><br><span class="line">j=np.array([0,1,2,0,0,0])</span><br><span class="line">&gt;&gt;a[j]</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11],</span><br><span class="line">       [ 0,  1,  2,  3],</span><br><span class="line">       [ 0,  1,  2,  3],</span><br><span class="line">       [ 0,  1,  2,  3]])</span><br></pre></td></tr></table></figure></p><p>例1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">i为一维数组的索引</span><br><span class="line"></span><br><span class="line">a=np.arange(10)**2 </span><br><span class="line">i=np.array([1,2,6,5])</span><br><span class="line">&gt;&gt;a[i]</span><br><span class="line">array([ 1,  4, 36, 25], dtype=int32)</span><br><span class="line"></span><br><span class="line">i为二维数组的索引</span><br><span class="line">a=np.arange(12).reshape(3,4)**2</span><br><span class="line">i=np.array([1,2])</span><br><span class="line">&gt;&gt;a</span><br><span class="line">array([[  0,   1,   4,   9],</span><br><span class="line">       [ 16,  25,  36,  49],</span><br><span class="line">       [ 64,  81, 100, 121]], dtype=int32)</span><br><span class="line">&gt;&gt;a[i]  </span><br><span class="line">array([[ 16,  25,  36,  49],</span><br><span class="line">       [ 64,  81, 100, 121]], dtype=int32)</span><br></pre></td></tr></table></figure></p><p>例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(16).reshape(4,4)</span><br><span class="line">&gt;&gt;a</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11],</span><br><span class="line">       [12, 13, 14, 15]])</span><br><span class="line">i=np.array([[0,0,1],[2,2,3]])</span><br><span class="line">&gt;&gt;a[i] </span><br><span class="line">array([[[ 0,  1,  2,  3],</span><br><span class="line">        [ 0,  1,  2,  3],</span><br><span class="line">        [ 4,  5,  6,  7]],</span><br><span class="line">       [[ 8,  9, 10, 11],</span><br><span class="line">        [ 8,  9, 10, 11],</span><br><span class="line">        [12, 13, 14, 15]]])</span><br></pre></td></tr></table></figure><p>由例0 不难得例1,2的结果</p><p>例3:（多维索引和切片）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(12).reshape(3,4)</span><br><span class="line">&gt;&gt;a</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11]])</span><br><span class="line">i=np.array([[0,1],[1,2]])</span><br><span class="line">j=np.array([[2,1],[3,3]])</span><br><span class="line">&gt;&gt;a[i]</span><br><span class="line">array([[[ 0,  1,  2,  3],</span><br><span class="line">        [ 4,  5,  6,  7]],</span><br><span class="line"></span><br><span class="line">       [[ 4,  5,  6,  7],</span><br><span class="line">        [ 8,  9, 10, 11]]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[([0,1,1,2],[2,1,3,3])]</span><br><span class="line">array([ 2,  5,  7, 11])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[i,2] #2逻辑上会被广播为[[2,2],[2,2]]</span><br><span class="line">&lt;=&gt; np.array([np.array([a[0,2],a[1,2]]),np.array([a[1,2],a[2,2]])])</span><br><span class="line">array([[ 2,  6],</span><br><span class="line">       [ 6, 10]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[0,j] #同上，0被广播</span><br><span class="line">array([[2, 1],</span><br><span class="line">       [3, 3]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[0,:] &lt;=&gt;a[0,0],a[0,1],a[0,2],a[0,3]组合</span><br><span class="line"> array([0, 1, 2, 3])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[:,1] &lt;=&gt;a[0,1],a[1,1],a[2,1]组合</span><br><span class="line">array([1, 5, 9])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[:,j] &lt;=&gt; a[0,j],a[1,j],a[2,j]三个组合,也有广播</span><br><span class="line">array([[[ 2,  1],</span><br><span class="line">        [ 3,  3]],</span><br><span class="line">       [[ 6,  5],</span><br><span class="line">        [ 7,  7]],</span><br><span class="line">       [[10,  9],</span><br><span class="line">        [11, 11]]])</span><br><span class="line">&gt;&gt;a[i,:] &lt;=&gt; a[0,:],a[1,:],a[1,:],a[2,:]组合【一定要先确定行，再确定列，认为&lt;=&gt;a[i,0],a[i,1],a[i,2],a[i,3]时，形状是不对的】</span><br><span class="line"></span><br><span class="line">array([[[ 0,  1,  2,  3],</span><br><span class="line">        [ 4,  5,  6,  7]],</span><br><span class="line"></span><br><span class="line">       [[ 4,  5,  6,  7],</span><br><span class="line">        [ 8,  9, 10, 11]]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[i,j]</span><br><span class="line">array([[ 2,  5],</span><br><span class="line">       [ 7, 11]])</span><br><span class="line"></span><br><span class="line">l=[i,j]</span><br><span class="line">&gt;&gt;a[l]</span><br><span class="line">array([[ 2,  5],</span><br><span class="line">       [ 7, 11]])</span><br></pre></td></tr></table></figure><p><b>3.3.2 使用布尔数组进行索引</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(12).reshape(3,4)</span><br><span class="line">b=a&gt;4</span><br><span class="line">&gt;&gt;a</span><br><span class="line">array([[ 0,  1,  2,  3],</span><br><span class="line">       [ 4,  5,  6,  7],</span><br><span class="line">       [ 8,  9, 10, 11]])</span><br><span class="line">&gt;&gt;b</span><br><span class="line">array([[False, False, False, False],</span><br><span class="line">       [False,  True,  True,  True],</span><br><span class="line">       [ True,  True,  True,  True]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[b]</span><br><span class="line">array([ 5,  6,  7,  8,  9, 10, 11])</span><br><span class="line"></span><br><span class="line">a[b]=0</span><br><span class="line">&gt;&gt;a</span><br><span class="line">array([[0, 1, 2, 3],</span><br><span class="line">       [4, 0, 0, 0],</span><br><span class="line">       [0, 0, 0, 0]])</span><br></pre></td></tr></table></figure></p><p><b>3.3.3 ix_()函数做索引</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(10).reshape(2,5)</span><br><span class="line">ixgrid=np.ix_([0,1],[2,4])</span><br><span class="line">&gt;&gt;ixgrid</span><br><span class="line"></span><br><span class="line">&gt;&gt;a[ixgrid]</span><br><span class="line">array([[2, 4],</span><br><span class="line">       [7, 9]])</span><br></pre></td></tr></table></figure></p><h1 id="4-操作多维数组形状"><a href="#4-操作多维数组形状" class="headerlink" title="4.操作多维数组形状"></a>4.操作多维数组形状</h1><h2 id="4-1-改变多维数组形状"><a href="#4-1-改变多维数组形状" class="headerlink" title="4.1 改变多维数组形状"></a>4.1 改变多维数组形状</h2><p>reshape()<br>resize()<br>reval()<br>narr.T</p><h2 id="4-2-合并多维数组"><a href="#4-2-合并多维数组" class="headerlink" title="4.2 合并多维数组"></a>4.2 合并多维数组</h2><p>hstack()<br>vstack()<br>column_stack() </p><h2 id="4-3-拆分多维数组"><a href="#4-3-拆分多维数组" class="headerlink" title="4.3 拆分多维数组"></a>4.3 拆分多维数组</h2><p>hsplit()<br>vsplit()<br>array_split()</p><h1 id="5-通用函数"><a href="#5-通用函数" class="headerlink" title="5.通用函数"></a>5.通用函数</h1><p>np.fromfucntion()<br>np.where()<br>np.sort()<br>np.numpy.apply_along_axis()<br>np.argmax()<br>np.argmin()<br>np.diff()<br>np.sum()<br>np.mean()<br>np.min()<br>np.max()<br>np.median()<br>np.floor()</p><h1 id="6-深拷贝与浅拷贝"><a href="#6-深拷贝与浅拷贝" class="headerlink" title="6.深拷贝与浅拷贝"></a>6.深拷贝与浅拷贝</h1><h2 id="6-1-完全不复制"><a href="#6-1-完全不复制" class="headerlink" title="6.1 完全不复制"></a>6.1 完全不复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(12).reshape(3,4)</span><br><span class="line">b=a</span><br><span class="line">id(a)</span><br><span class="line">id(b)</span><br><span class="line">b.resize(3,4)</span><br><span class="line">#此时a的形状也会发生改变</span><br></pre></td></tr></table></figure><p>可以理解为b为a的一个别名</p><h2 id="6-2-浅拷贝"><a href="#6-2-浅拷贝" class="headerlink" title="6.2 浅拷贝"></a>6.2 浅拷贝</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(10)</span><br><span class="line">b=a.view()</span><br></pre></td></tr></table></figure><p>b,a指向同一块内存，但b,a不是同一个对象（id(a)!=id(b)）</p><h2 id="6-3-深拷贝"><a href="#6-3-深拷贝" class="headerlink" title="6.3 深拷贝"></a>6.3 深拷贝</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=a.copy()</span><br></pre></td></tr></table></figure><p>直接将a指向的内存单元复制了一份，然后b指向了复制的内存单元</p><h1 id="7-广播技术"><a href="#7-广播技术" class="headerlink" title="7.广播技术"></a>7.广播技术</h1><h2 id="7-1-广播对象"><a href="#7-1-广播对象" class="headerlink" title="7.1 广播对象"></a>7.1 广播对象</h2><p>广播技术是为了让两个形状不同的多维数组‘尽可能的’进行<b>按位置加减</b>而不出错。注意矩阵的乘除没有广播，运算是按照数学定义严格执行的(前矩阵的列数==后矩阵的行数)。</p><h2 id="7-2-广播规则："><a href="#7-2-广播规则：" class="headerlink" title="7.2 广播规则："></a>7.2 广播规则：</h2><p>当操作两个array时，numpy会逐个比较它们的shape（构成的元组tuple），只有在下述情况下，两arrays才算兼容：<br>他们是相等的，或者其中一个是1</p><p>当符合广播规则时，会对运算的多维数组narray进行<b>逻辑</b>上的扩展，以得到结果。（注意，多维数组在物理内存上不会被修改）</p><p><b>扩展规则一：如果所有输入数组不具有相同数量的维度，则将“1”重复地预先添加到较小数组的形状，直到所有数组具有相同数量的维度。</b><br><b>扩展规则二：当输入数组的某个轴的长度为1时，沿着此轴运算时都用此轴上的第一组值</b><br>举个例子：<br>如a为二维数组：[[0],[1],[2],[3]] shape=(4,1)<br>b为一维向量：[1,1,1,1,1] shape=(5,)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a:(2d array)  4 x 1</span><br><span class="line">b:(1d array)      5</span><br></pre></td></tr></table></figure></p><p>更多解释和介绍，参照：</p><p><a href="https://numpy.org/devdocs/user/theory.broadcasting.html" target="_blank" rel="noopener">numpy广播官方文档</a></p><p><a href="https://zhuanlan.zhihu.com/p/35010592" target="_blank" rel="noopener">numpy广播知乎文章</a></p><p><a href="https://www.numpy.org.cn/user/basics/broadcasting.html#%E4%B8%80%E8%88%AC%E5%B9%BF%E6%92%AD%E8%A7%84%E5%88%99" target="_blank" rel="noopener">numpy中文网</a></p><p>由广播规则可得：a+b 可以计算（其中一个是1）,下面进行多维数组的逻辑扩展，由扩展规则一可得，b比a少一维，先将b用1填充至与a同一维度，b为[[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]] 此时b.shape=(4,5),由因为a 的axis=1 的轴长度为1，所以再对a进行扩展，此时应用扩展规则二，a扩展后为：[[0,0,0,0,0],[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3]] 此时 a.shape=(4,5),最后a+b在按位相加。注意以上都是在逻辑上的扩展，计算时物理内存并未扩展。</p><h1 id="8-numpy在线性代数方面的工作"><a href="#8-numpy在线性代数方面的工作" class="headerlink" title="8. numpy在线性代数方面的工作"></a>8. numpy在线性代数方面的工作</h1><h2 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h2><p>这一部分参考： <a href="https://www.numpy.org.cn/article/basics/numpy_matrices_vectors.html" target="_blank" rel="noopener">https://www.numpy.org.cn/article/basics/numpy_matrices_vectors.html</a></p><h2 id="8-1-向量与矩阵"><a href="#8-1-向量与矩阵" class="headerlink" title="8.1 向量与矩阵"></a>8.1 向量与矩阵</h2><h2 id="8-2-解线性方程组"><a href="#8-2-解线性方程组" class="headerlink" title="8.2 解线性方程组"></a>8.2 解线性方程组</h2><h2 id="8-3-多元线性回归"><a href="#8-3-多元线性回归" class="headerlink" title="8.3 多元线性回归"></a>8.3 多元线性回归</h2><h1 id="9-numpy与机器学习"><a href="#9-numpy与机器学习" class="headerlink" title="9. numpy与机器学习"></a>9. numpy与机器学习</h1><h2 id="9-1-numpy与数据分析"><a href="#9-1-numpy与数据分析" class="headerlink" title="9.1 numpy与数据分析"></a>9.1 numpy与数据分析</h2><h2 id="9-2-numpy与神经网络"><a href="#9-2-numpy与神经网络" class="headerlink" title="9.2 numpy与神经网络"></a>9.2 numpy与神经网络</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title=".参考资料"></a>.参考资料</h1><p><a href="https://numpy.org/devdocs/user/quickstart.html" target="_blank" rel="noopener">numpy官网</a></p><p><a href="https://www.zhihu.com/question/33561391" target="_blank" rel="noopener">知乎提问</a></p><p><a href="https://www.numpy.org.cn/user/quickstart.html" target="_blank" rel="noopener">numpy中文网</a></p><p><a href="https://numpy.org/devdocs/user/theory.broadcasting.html" target="_blank" rel="noopener">numpy广播官方文档</a></p><p><a href="https://zhuanlan.zhihu.com/p/35010592" target="_blank" rel="noopener">numpy广播知乎文章</a></p><p>~未完</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-建立n维数组&quot;&gt;&lt;a href=&quot;#1-建立n维数组&quot; class=&quot;headerlink&quot; title=&quot;1.建立n维数组&quot;&gt;&lt;/a&gt;1.建立n维数组&lt;/h1&gt;&lt;h2 id=&quot;1-1-常用方法&quot;&gt;&lt;a href=&quot;#1-1-常用方法&quot; class=&quot;headerlink&quot; title=&quot;1.1 常用方法&quot;&gt;&lt;/a&gt;1.1 常用方法&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;np.random.random(())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.random.uniform()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.ones(())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.zeros(())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.arange().reshape()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.arange().resize()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.array([])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.empty()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.linspace()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.eys()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>线性回归案例</title>
    <link href="https://ahpuchend.github.io/2019/10/18/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A1%88%E4%BE%8B/"/>
    <id>https://ahpuchend.github.io/2019/10/18/线性回归案例/</id>
    <published>2019-10-18T13:02:47.000Z</published>
    <updated>2019-10-18T13:02:47.942Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>matplotlib入门</title>
    <link href="https://ahpuchend.github.io/2019/10/18/matplotlib%E5%85%A5%E9%97%A8/"/>
    <id>https://ahpuchend.github.io/2019/10/18/matplotlib入门/</id>
    <published>2019-10-18T12:56:11.000Z</published>
    <updated>2019-10-26T13:38:39.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">x=np.linspace(-5,5,100)</span><br><span class="line">y1=2*x+4</span><br><span class="line">y2=x**2</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#加标题 plt.suptitle</span><br><span class="line">plt.suptitle(&apos;figure1&apos;)</span><br><span class="line"></span><br><span class="line">#设定x,y轴名称 plt.xlable,plt.ylabel</span><br><span class="line">plt.xlabel(&apos;x&apos;)</span><br><span class="line">plt.ylabel(&apos;y&apos;)</span><br><span class="line"></span><br><span class="line">#设定x,y轴的范围 plt.xlim,plt.ylim</span><br><span class="line"># plt.xlim((-5,5))</span><br><span class="line"># plt.ylim((-10,10))</span><br><span class="line"></span><br><span class="line">#设置坐标轴的单位距离和单元名称</span><br><span class="line"># plt.xticks(np.linspace(-5,5,11))</span><br><span class="line"># plt.yticks(np.linspace(-5,25,31))</span><br><span class="line"># plt.yticks([-10,-5,0,5,12],[r&apos;$very\ bad$&apos;,r&apos;$bad\ \alpha$&apos;,r&apos;$ok$&apos;,r&apos;$good$&apos;,r&apos;$very\ good$&apos;])</span><br><span class="line"></span><br><span class="line">#设置轴的位置</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">1.获得当前四边轴线（get current axis）plt.gca()</span><br><span class="line">2.去掉右边和上边的轴线 ax.spines[&apos;right and top&apos;].set_color(&apos;none&apos;)</span><br><span class="line">3.令x为下边轴线， ax.xaxis.set_ticks_positions(&apos;bottom&apos;)</span><br><span class="line">  令y为左边轴线， ax.yaxis.set_ticks_positions(&apos;left&apos;)</span><br><span class="line">4.设置原点坐标((0,0)为原点)</span><br><span class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;,0))</span><br><span class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;,0))</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.xaxis.set_ticks_position(&apos;bottom&apos;)</span><br><span class="line">ax.yaxis.set_ticks_position(&apos;left&apos;)</span><br><span class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;,0))</span><br><span class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;,0))</span><br><span class="line"># ax.derection</span><br><span class="line"># ax.spines[&apos;bottom&apos;].set_axisline_style(&quot;-|&gt;&quot;)</span><br><span class="line"># ax.spines[&apos;bottom&apos;].set_axisline_style(&quot;-|&gt;&quot;)</span><br><span class="line"></span><br><span class="line">#控制线条的颜色,宽度,和linestyle[solid,dotted,dashed,dashdot]</span><br><span class="line">l2,=plt.plot(x,y2)</span><br><span class="line">l1,=plt.plot(x,y1,linestyle=&apos;solid&apos;,linewidth=1.0,color=&apos;green&apos;,)</span><br><span class="line"></span><br><span class="line">#设置图例 plt.legend()</span><br><span class="line">#无参数 已在plt.plot(label=&apos;y1&apos;)中加入label参数</span><br><span class="line">plt.legend(handles=[l1,l2],labels=[&apos;y1&apos;,&apos;y2&apos;],loc=&apos;best&apos;)</span><br><span class="line"></span><br><span class="line">#加注解 annotation，比如给线的交点加注解</span><br><span class="line">#标出 y1=2*x+4 和 y2=x**2 的交点</span><br><span class="line">#利用零点定理找“近似”交点,(近似由于线条是由拟合的,真正的零点不一定生成了)</span><br><span class="line">idx = np.argwhere(np.diff(np.sign(y1-y2))).flatten()</span><br><span class="line">plt.plot(x[idx], y2[idx], &apos;ro&apos;,color=&apos;red&apos;)</span><br><span class="line"></span><br><span class="line">for i in range(len(idx)):</span><br><span class="line">    plt.plot([x[idx][i],x[idx][i]],[y2[idx][i],0],&apos;k--&apos;,lw=2.5)</span><br><span class="line"></span><br><span class="line">#加annotation</span><br><span class="line">plt.annotate(r&apos;(%s,%s)&apos;%(round(x[idx][1],1),round(y2[idx][1],1)),xy=(x[idx][1],y2[idx][1]),xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(+4,+3),fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&apos;-&gt;&apos;,connectionstyle=&apos;arc3,rad=0.2&apos;))</span><br><span class="line"></span><br><span class="line">#加一些说明</span><br><span class="line">plt.text(-4,5,r&apos;$this\ is\  some\  text\  \sigma_i\  \alpha$&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ticks能见度</span><br><span class="line">for label in ax.get_xticklabels()+ax.get_yticklabels():</span><br><span class="line">    label.set_fontsize(12)</span><br><span class="line">    label.set_bbox(dict(facecolor=&apos;pink&apos;,edgecolor=&apos;None&apos;,alpha=0.7))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">n=1024</span><br><span class="line">X=np.random.normal(0,1,n)</span><br><span class="line">Y=np.random.normal(0,1,n)</span><br><span class="line">T=np.arctan2(Y,X) # for color value</span><br><span class="line">plt.scatter(X,Y,c=T,alpha=0.5)</span><br><span class="line">plt.xlim((-2.5,2.5))</span><br><span class="line">plt.ylim((-2.5,2.5))</span><br><span class="line">plt.xticks(())# 去掉x/yticks</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h1><h2 id="垂直的柱状图"><a href="#垂直的柱状图" class="headerlink" title="垂直的柱状图"></a>垂直的柱状图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">#plt.bar 柱状图</span><br><span class="line">n=12</span><br><span class="line">X=np.arange(n)</span><br><span class="line">Y1=np.random.uniform(0,1.0,n)</span><br><span class="line">Y2=np.random.uniform(0.5,1.0,n)*(1-X/float(n))</span><br><span class="line"></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.xaxis.set_ticks_position(&apos;bottom&apos;)</span><br><span class="line">ax.yaxis.set_ticks_position(&apos;left&apos;)</span><br><span class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;,0))</span><br><span class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;,-0.50))</span><br><span class="line"></span><br><span class="line">plt.xlim((-1,12))</span><br><span class="line">plt.ylim((-1,1))</span><br><span class="line"></span><br><span class="line">plt.bar(X,+Y1,facecolor=&apos;#9999fF&apos;,edgecolor=&apos;white&apos;)</span><br><span class="line">plt.bar(X,-Y2,facecolor=&apos;#ff9999&apos;,edgecolor=&apos;white&apos;)</span><br><span class="line"></span><br><span class="line">for x,y in zip(X,Y1):</span><br><span class="line">    plt.text(x+0.04,y+0.05,&apos;%0.2f&apos;%y,ha=&apos;center&apos;,va=&apos;bottom&apos;)</span><br><span class="line"></span><br><span class="line">for x,y in zip(X,Y2):</span><br><span class="line">    plt.text(x+0.04,-y-0.05,&apos;%0.2f&apos;%-y,ha=&apos;center&apos;,va=&apos;top&apos;)</span><br><span class="line">plt.show()</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## 水平的柱状图</span><br></pre></td></tr></table></figure><p>```</p><h1 id="等高线"><a href="#等高线" class="headerlink" title="等高线"></a>等高线</h1><h1 id="饼装图"><a href="#饼装图" class="headerlink" title="饼装图"></a>饼装图</h1><h1 id="3D数据"><a href="#3D数据" class="headerlink" title="3D数据"></a>3D数据</h1><h1 id="多子图"><a href="#多子图" class="headerlink" title="多子图"></a>多子图</h1><p>参考资料：<br><a href="https://morvanzhou.github.io/tutorials/data-manipulation/plt/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/data-manipulation/plt/</a></p><p><a href="https://matplotlib.org/gallery/index.html" target="_blank" rel="noopener">https://matplotlib.org/gallery/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;折线图&quot;&gt;&lt;a href=&quot;#折线图&quot; class=&quot;headerlink&quot; title=&quot;折线图&quot;&gt;&lt;/a&gt;折线图&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import matplotlib.pyplot as plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x=np.linspace(-5,5,100)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y1=2*x+4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y2=x**2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.figure()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#加标题 plt.suptitle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.suptitle(&amp;apos;figure1&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#设定x,y轴名称 plt.xlable,plt.ylabel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&amp;apos;x&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&amp;apos;y&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#设定x,y轴的范围 plt.xlim,plt.ylim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# plt.xlim((-5,5))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# plt.ylim((-10,10))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#设置坐标轴的单位距离和单元名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# plt.xticks(np.linspace(-5,5,11))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# plt.yticks(np.linspace(-5,25,31))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# plt.yticks([-10,-5,0,5,12],[r&amp;apos;$very\ bad$&amp;apos;,r&amp;apos;$bad\ \alpha$&amp;apos;,r&amp;apos;$ok$&amp;apos;,r&amp;apos;$good$&amp;apos;,r&amp;apos;$very\ good$&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#设置轴的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.获得当前四边轴线（get current axis）plt.gca()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.去掉右边和上边的轴线 ax.spines[&amp;apos;right and top&amp;apos;].set_color(&amp;apos;none&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.令x为下边轴线， ax.xaxis.set_ticks_positions(&amp;apos;bottom&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  令y为左边轴线， ax.yaxis.set_ticks_positions(&amp;apos;left&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.设置原点坐标((0,0)为原点)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax.spines[&amp;apos;bottom&amp;apos;].set_position((&amp;apos;data&amp;apos;,0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax.spines[&amp;apos;left&amp;apos;].set_position((&amp;apos;data&amp;apos;,0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax=plt.gca()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax.spines[&amp;apos;right&amp;apos;].set_color(&amp;apos;none&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax.spines[&amp;apos;top&amp;apos;].set_color(&amp;apos;none&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax.xaxis.set_ticks_position(&amp;apos;bottom&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax.yaxis.set_ticks_position(&amp;apos;left&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax.spines[&amp;apos;bottom&amp;apos;].set_position((&amp;apos;data&amp;apos;,0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ax.spines[&amp;apos;left&amp;apos;].set_position((&amp;apos;data&amp;apos;,0))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ax.derection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ax.spines[&amp;apos;bottom&amp;apos;].set_axisline_style(&amp;quot;-|&amp;gt;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ax.spines[&amp;apos;bottom&amp;apos;].set_axisline_style(&amp;quot;-|&amp;gt;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#控制线条的颜色,宽度,和linestyle[solid,dotted,dashed,dashdot]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l2,=plt.plot(x,y2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l1,=plt.plot(x,y1,linestyle=&amp;apos;solid&amp;apos;,linewidth=1.0,color=&amp;apos;green&amp;apos;,)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#设置图例 plt.legend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#无参数 已在plt.plot(label=&amp;apos;y1&amp;apos;)中加入label参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.legend(handles=[l1,l2],labels=[&amp;apos;y1&amp;apos;,&amp;apos;y2&amp;apos;],loc=&amp;apos;best&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#加注解 annotation，比如给线的交点加注解&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#标出 y1=2*x+4 和 y2=x**2 的交点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#利用零点定理找“近似”交点,(近似由于线条是由拟合的,真正的零点不一定生成了)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;idx = np.argwhere(np.diff(np.sign(y1-y2))).flatten()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(x[idx], y2[idx], &amp;apos;ro&amp;apos;,color=&amp;apos;red&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for i in range(len(idx)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.plot([x[idx][i],x[idx][i]],[y2[idx][i],0],&amp;apos;k--&amp;apos;,lw=2.5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#加annotation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.annotate(r&amp;apos;(%s,%s)&amp;apos;%(round(x[idx][1],1),round(y2[idx][1],1)),xy=(x[idx][1],y2[idx][1]),xycoords=&amp;apos;data&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             xytext=(+4,+3),fontsize=10,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             arrowprops=dict(arrowstyle=&amp;apos;-&amp;gt;&amp;apos;,connectionstyle=&amp;apos;arc3,rad=0.2&amp;apos;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#加一些说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.text(-4,5,r&amp;apos;$this\ is\  some\  text\  \sigma_i\  \alpha$&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ticks能见度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for label in ax.get_xticklabels()+ax.get_yticklabels():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label.set_fontsize(12)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label.set_bbox(dict(facecolor=&amp;apos;pink&amp;apos;,edgecolor=&amp;apos;None&amp;apos;,alpha=0.7))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://ahpuchend.github.io/categories/python/"/>
    
    
      <category term="matplotlib" scheme="https://ahpuchend.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>距离和相似度度量方法</title>
    <link href="https://ahpuchend.github.io/2019/10/16/%E8%B7%9D%E7%A6%BB%E5%92%8C%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%BA%A6%E9%87%8F%E6%96%B9%E6%B3%95/"/>
    <id>https://ahpuchend.github.io/2019/10/16/距离和相似度度量方法/</id>
    <published>2019-10-16T07:43:32.000Z</published>
    <updated>2019-10-17T03:17:07.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h1><h1 id="哈曼顿距离"><a href="#哈曼顿距离" class="headerlink" title="哈曼顿距离"></a>哈曼顿距离</h1><h1 id="夹角余弦"><a href="#夹角余弦" class="headerlink" title="夹角余弦"></a>夹角余弦</h1><h1 id="皮尔逊系数"><a href="#皮尔逊系数" class="headerlink" title="皮尔逊系数"></a>皮尔逊系数</h1><h1 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h1><h1 id="马氏距离"><a href="#马氏距离" class="headerlink" title="马氏距离"></a>马氏距离</h1><h1 id="切比雪夫距离"><a href="#切比雪夫距离" class="headerlink" title="切比雪夫距离"></a>切比雪夫距离</h1><h1 id="闵可夫斯基距离"><a href="#闵可夫斯基距离" class="headerlink" title="闵可夫斯基距离"></a>闵可夫斯基距离</h1><h1 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h1><h1 id="杰卡德相似系数与杰卡德距离"><a href="#杰卡德相似系数与杰卡德距离" class="headerlink" title="杰卡德相似系数与杰卡德距离"></a>杰卡德相似系数与杰卡德距离</h1><p>参考资料：<br><a href="https://cloud.tencent.com/developer/article/1049090" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1049090</a></p><p><a href="https://www.zhihu.com/question/20852004" target="_blank" rel="noopener">https://www.zhihu.com/question/20852004</a></p><a id="more"></a><p><a href="https://segmentfault.com/q/1010000000094674" target="_blank" rel="noopener">https://segmentfault.com/q/1010000000094674</a></p><p><a href="https://www.zhihu.com/question/19734616" target="_blank" rel="noopener">https://www.zhihu.com/question/19734616</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;欧式距离&quot;&gt;&lt;a href=&quot;#欧式距离&quot; class=&quot;headerlink&quot; title=&quot;欧式距离&quot;&gt;&lt;/a&gt;欧式距离&lt;/h1&gt;&lt;h1 id=&quot;哈曼顿距离&quot;&gt;&lt;a href=&quot;#哈曼顿距离&quot; class=&quot;headerlink&quot; title=&quot;哈曼顿距离&quot;&gt;&lt;/a&gt;哈曼顿距离&lt;/h1&gt;&lt;h1 id=&quot;夹角余弦&quot;&gt;&lt;a href=&quot;#夹角余弦&quot; class=&quot;headerlink&quot; title=&quot;夹角余弦&quot;&gt;&lt;/a&gt;夹角余弦&lt;/h1&gt;&lt;h1 id=&quot;皮尔逊系数&quot;&gt;&lt;a href=&quot;#皮尔逊系数&quot; class=&quot;headerlink&quot; title=&quot;皮尔逊系数&quot;&gt;&lt;/a&gt;皮尔逊系数&lt;/h1&gt;&lt;h1 id=&quot;信息熵&quot;&gt;&lt;a href=&quot;#信息熵&quot; class=&quot;headerlink&quot; title=&quot;信息熵&quot;&gt;&lt;/a&gt;信息熵&lt;/h1&gt;&lt;h1 id=&quot;马氏距离&quot;&gt;&lt;a href=&quot;#马氏距离&quot; class=&quot;headerlink&quot; title=&quot;马氏距离&quot;&gt;&lt;/a&gt;马氏距离&lt;/h1&gt;&lt;h1 id=&quot;切比雪夫距离&quot;&gt;&lt;a href=&quot;#切比雪夫距离&quot; class=&quot;headerlink&quot; title=&quot;切比雪夫距离&quot;&gt;&lt;/a&gt;切比雪夫距离&lt;/h1&gt;&lt;h1 id=&quot;闵可夫斯基距离&quot;&gt;&lt;a href=&quot;#闵可夫斯基距离&quot; class=&quot;headerlink&quot; title=&quot;闵可夫斯基距离&quot;&gt;&lt;/a&gt;闵可夫斯基距离&lt;/h1&gt;&lt;h1 id=&quot;汉明距离&quot;&gt;&lt;a href=&quot;#汉明距离&quot; class=&quot;headerlink&quot; title=&quot;汉明距离&quot;&gt;&lt;/a&gt;汉明距离&lt;/h1&gt;&lt;h1 id=&quot;杰卡德相似系数与杰卡德距离&quot;&gt;&lt;a href=&quot;#杰卡德相似系数与杰卡德距离&quot; class=&quot;headerlink&quot; title=&quot;杰卡德相似系数与杰卡德距离&quot;&gt;&lt;/a&gt;杰卡德相似系数与杰卡德距离&lt;/h1&gt;&lt;p&gt;参考资料：&lt;br&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1049090&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1049090&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/20852004&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/20852004&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>回归算法实例</title>
    <link href="https://ahpuchend.github.io/2019/10/16/%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B/"/>
    <id>https://ahpuchend.github.io/2019/10/16/回归算法实例/</id>
    <published>2019-10-16T07:27:32.000Z</published>
    <updated>2019-10-16T07:27:32.940Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>算法课讨论习题</title>
    <link href="https://ahpuchend.github.io/2019/10/16/%E7%AE%97%E6%B3%95%E8%AF%BE%E8%AE%A8%E8%AE%BA%E4%B9%A0%E9%A2%98/"/>
    <id>https://ahpuchend.github.io/2019/10/16/算法课讨论习题/</id>
    <published>2019-10-16T07:26:45.000Z</published>
    <updated>2019-11-18T14:24:27.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题三：素数判定问题"><a href="#题三：素数判定问题" class="headerlink" title="题三：素数判定问题"></a>题三：素数判定问题</h2><h2 id="题四：不无聊序列"><a href="#题四：不无聊序列" class="headerlink" title="题四：不无聊序列"></a>题四：不无聊序列</h2><h2 id="题五：二维平面的最近点对问题"><a href="#题五：二维平面的最近点对问题" class="headerlink" title="题五：二维平面的最近点对问题"></a>题五：二维平面的最近点对问题</h2><h2 id="题六：顺序统计量问题：第i小元素"><a href="#题六：顺序统计量问题：第i小元素" class="headerlink" title="题六：顺序统计量问题：第i小元素"></a>题六：顺序统计量问题：第i小元素</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题三：素数判定问题&quot;&gt;&lt;a href=&quot;#题三：素数判定问题&quot; class=&quot;headerlink&quot; title=&quot;题三：素数判定问题&quot;&gt;&lt;/a&gt;题三：素数判定问题&lt;/h2&gt;&lt;h2 id=&quot;题四：不无聊序列&quot;&gt;&lt;a href=&quot;#题四：不无聊序列&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>梯度下降算法概述</title>
    <link href="https://ahpuchend.github.io/2019/10/16/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    <id>https://ahpuchend.github.io/2019/10/16/梯度下降算法概述/</id>
    <published>2019-10-16T07:25:26.000Z</published>
    <updated>2019-10-16T07:25:26.171Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>分类算法概述</title>
    <link href="https://ahpuchend.github.io/2019/10/16/%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    <id>https://ahpuchend.github.io/2019/10/16/分类算法概述/</id>
    <published>2019-10-16T06:47:59.000Z</published>
    <updated>2019-10-18T12:59:37.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-KNN算法"><a href="#第一章-KNN算法" class="headerlink" title="第一章 KNN算法"></a>第一章 KNN算法</h1><h2 id="1-1-问题定义："><a href="#1-1-问题定义：" class="headerlink" title="1.1 问题定义："></a>1.1 问题定义：</h2><p>给定m个已被分为Cn类个样本[监督算法],对未标记类别的测试数据data求其所属类别？</p><h2 id="1-2-算法描述："><a href="#1-2-算法描述：" class="headerlink" title="1.2 算法描述："></a>1.2 算法描述：</h2><p>1）计算测试数据与各个训练数据之间的距离；</p><p>2）按照距离的递增关系进行排序；</p><p>3）选取距离最小的K个点；</p><p>4）确定前K个点所在类别的出现频率；</p><a id="more"></a><p>5）返回前K个点中出现频率最高的类别作为测试数据的预测分类。</p><p>由算法思想可得，影响KNN算法效果有：<br><b>距离和相似度度量方法的选择</b>在具体问题中，度量距离和相似度时，可能也需要特征归一化处理。</p><p><b>自定义K值的大小</b>两个因素</p><p>另一方面，KNN算法在执行过程中 对训练数据进行k邻近搜索，所以训练集的存储数据结构，对KNN算法的时间复杂度具有重大影响，故，我们在实际应用中需要给训练集一个便于搜索的数据结构。</p><h2 id="1-3-基于KNN的手写数字识别"><a href="#1-3-基于KNN的手写数字识别" class="headerlink" title="1.3 基于KNN的手写数字识别"></a>1.3 基于KNN的手写数字识别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">#-*-coding:utf-8-*-</span><br><span class="line">from numpy import *</span><br><span class="line">import operator</span><br><span class="line">from os import listdir</span><br><span class="line"></span><br><span class="line">def classify0(inX, dataSet, labels, k):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    KNN算法分类</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    dataSetSize = dataSet.shape[0]</span><br><span class="line">    diffMat = tile(inX, (dataSetSize,1)) - dataSet</span><br><span class="line"></span><br><span class="line">    # 求测试数据与每一个训练集样本的欧式距离</span><br><span class="line">    sqDiffMat = diffMat**2</span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=1)</span><br><span class="line">    distances = sqDistances**0.5</span><br><span class="line"></span><br><span class="line">    #欧氏距离，从小到大的索引</span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line"></span><br><span class="line">    classCount=&#123;&#125;</span><br><span class="line">    ## 统计K个统计量中存在的各个数字的个数</span><br><span class="line">    for i in range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class="line"></span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1</span><br><span class="line"></span><br><span class="line">    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)</span><br><span class="line"></span><br><span class="line">    return sortedClassCount[0][0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def img2vector(filename):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    将一个txt文件转为1*1024个narray</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    returnVect = zeros((1,1024))</span><br><span class="line">    fr = open(filename) #打开每个存数字的txt文件</span><br><span class="line">    for i in range(32):</span><br><span class="line">        lineStr = fr.readline()  #readline()每次对txt文件读一行</span><br><span class="line">        for j in range(32):</span><br><span class="line">            returnVect[0,32*i+j] = int(lineStr[j])</span><br><span class="line">    return returnVect</span><br><span class="line"></span><br><span class="line">def handwritingClassTest():</span><br><span class="line"></span><br><span class="line">    hwLabels = []</span><br><span class="line">    trainingFileList = listdir(r&apos;C:\Users\chend\PycharmProjects\MNIST\trainingDigits&apos;)</span><br><span class="line">    print(trainingFileList )</span><br><span class="line"></span><br><span class="line">    m = len(trainingFileList)</span><br><span class="line">    print(m,&apos;张手写图片&apos;)</span><br><span class="line">    trainingMat = zeros((m,1024)) #m*1024大矩阵</span><br><span class="line"></span><br><span class="line">    for i in range(m):</span><br><span class="line">        fileNameStr = trainingFileList[i]  #trainingDigits文件夹下的每个txt文件名</span><br><span class="line">        fileStr = fileNameStr.split(&apos;.&apos;)[0]  #0_0...0_102/.....9_203</span><br><span class="line">        classNumStr = int(fileStr.split(&apos;_&apos;)[0])  #获取到每个文件对应的数字值</span><br><span class="line">        hwLabels.append(classNumStr)   #hwLabels列表中存放所有文本对应的数字</span><br><span class="line">        #trainingMat每一行（1024列）存放一个txt文件中的数字、</span><br><span class="line">        ##训练集中的数字全部读完，并存入m*1024的大矩阵中</span><br><span class="line">        trainingMat[i,:] = img2vector(r&apos;C:\Users\chend\PycharmProjects\MNIST\trainingDigits/%s&apos; % fileNameStr)</span><br><span class="line">    # print(trainingMat.shape)</span><br><span class="line">    # set_printoptions(threshold=inf)</span><br><span class="line">    # print(trainingMat)</span><br><span class="line"></span><br><span class="line">#读取测试集中的的所有txt文件</span><br><span class="line">    testFileList = listdir(r&apos;C:\Users\chend\PycharmProjects\MNIST\testDigits&apos;)</span><br><span class="line">    errorCount = 0.0  #错误率</span><br><span class="line">    mTest = len(testFileList)</span><br><span class="line">    print(mTest,&apos;张测试手写图片&apos;)</span><br><span class="line">    for i in range(mTest):</span><br><span class="line">        fileNameStr = testFileList[i]</span><br><span class="line">        fileStr = fileNameStr.split(&apos;.&apos;)[0]</span><br><span class="line">        classNumStr = int(fileStr.split(&apos;_&apos;)[0]) # 测试数据真实值</span><br><span class="line">        vectorUnderTest = img2vector(r&apos;C:\Users\chend\PycharmProjects\MNIST\testDigits/%s&apos; % fileNameStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #对每个测试集中的txt文件分类</span><br><span class="line">        classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, 3)</span><br><span class="line"></span><br><span class="line">        print (&quot;the classifier came back with: %d, the real answer is: %d&quot; % (classifierResult, classNumStr))</span><br><span class="line"></span><br><span class="line">        if classifierResult != classNumStr:</span><br><span class="line">            print(&apos;这里识别错了&apos;)</span><br><span class="line">            errorCount += 1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(&quot;\n the total number of errors is: %d&quot; % errorCount)</span><br><span class="line">    print(&quot;\n the total error rate is: %f&quot; % (errorCount/float(mTest)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    handwritingClassTest()</span><br></pre></td></tr></table></figure><p>实验结果：<br>K=3时：</p><p><img src="/2019/10/16/分类算法概述/k3.png" alt="k=3"></p><p>K=5时：</p><p><img src="/2019/10/16/分类算法概述/k5.png" alt="k=5"></p><p>K=7时：</p><p><img src="/2019/10/16/分类算法概述/k7.png" alt="k=7"></p><p>K=9时：</p><p><img src="/2019/10/16/分类算法概述/k9.png" alt="k=9"></p><h2 id="1-4-参考资料："><a href="#1-4-参考资料：" class="headerlink" title="1.4 参考资料："></a>1.4 参考资料：</h2><p><a href="https://wizardforcel.gitbooks.io/dm-algo-top10/content/knn.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/dm-algo-top10/content/knn.html</a></p><p><a href="https://www.cnblogs.com/ybjourney/p/4702562.html" target="_blank" rel="noopener">https://www.cnblogs.com/ybjourney/p/4702562.html</a></p><p>李航 著 《统计学习方法》北京:清华大学出版社 2012</p><p><a href="https://zhuanlan.zhihu.com/p/25994179" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25994179</a></p><h1 id="第二章-KMeans算法"><a href="#第二章-KMeans算法" class="headerlink" title="第二章 KMeans算法"></a>第二章 KMeans算法</h1><h2 id="2-1-算法描述："><a href="#2-1-算法描述：" class="headerlink" title="2.1 算法描述："></a>2.1 算法描述：</h2><p>1、用中心向量c1, c2, …, ck初始化k个聚类中心</p><p>2、分组:<br>（1）将样本分配给距离其最近的中心向量</p><p>（2）由这些样本构造不相交（ non-overlapping ）的聚类</p><p>3、确定中心:<br>用各个聚类的中心向量作为新的中心</p><p>4、重复分组和确定中心的步骤，直至算法收敛。<br><b>收敛的标志可以简单认为：连续两轮聚类结果相同。</b></p><h2 id="2-2-算法评估："><a href="#2-2-算法评估：" class="headerlink" title="2.2 算法评估："></a>2.2 算法评估：</h2><ol><li>算法收敛速度和初始化K个聚类中心相关；</li><li>K值的选择影响聚类的效果；</li><li>特别低，Kmeans只适合类的中心是可以被计算的才适用，（如：均值表示中心，当无法用数学符号表示时，Kmeans算法就无用武之地）</li><li>Kmeans 对于“躁声”和孤立点数据是敏感的，少量的该类数据能够对平均值产生极大的影响。</li></ol><h2 id="2-3-KMeans例子"><a href="#2-3-KMeans例子" class="headerlink" title="2.3 KMeans例子"></a>2.3 KMeans例子</h2><p>给n个随机点分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"># G1 = np.random.randn(300, 2) + 10</span><br><span class="line"># G2 = np.random.randn(300, 2)</span><br><span class="line"># G3 = np.random.randn(3000, 2) - 10</span><br><span class="line"># data = np.row_stack((G1, G2, G3))</span><br><span class="line">data=np.random.randint(1000,size=(1000,2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#计算欧式距离</span><br><span class="line">def dist(source,dest):</span><br><span class="line">    #K表聚类数目</span><br><span class="line">    K=dest.shape[0]</span><br><span class="line"></span><br><span class="line">    # result存放每个样本到簇中心的欧式距离，result[i,j]表示第i个样本点与第j个簇中心点之间的欧氏距离</span><br><span class="line">    result = np.zeros((source.shape[0],K))</span><br><span class="line"></span><br><span class="line">    for i in range(K):</span><br><span class="line">        result[:,i] = np.sqrt(np.sum(np.square(source-dest[i]),axis=1))</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分组</span><br><span class="line">def group(distmat,K):</span><br><span class="line"></span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    :param distmat:</span><br><span class="line">    :param K:</span><br><span class="line">    :return: Series</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    distindex=np.argsort(distmat,axis=1)</span><br><span class="line"></span><br><span class="line">    # 找出所有数据离哪个簇中心的距离最短</span><br><span class="line">    mindist=distindex[:,0]</span><br><span class="line">    # print(&apos;找出所有数据离哪个簇中心的距离最短:&apos;)</span><br><span class="line">    # print(mindist)</span><br><span class="line"></span><br><span class="line">    clusters=pd.Series(np.arange(distmat.shape[0]),index=mindist)</span><br><span class="line"></span><br><span class="line">    # print(clusters)</span><br><span class="line"></span><br><span class="line">    return clusters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def initCluster(data,K):</span><br><span class="line">    #随机选出K个簇中心点的下表</span><br><span class="line">    centClusterindexs = np.random.choice(data.shape[0] - 1, K,replace=False)</span><br><span class="line">    # print(&apos;选得簇中心点下标：&apos;,centClusterindexs)</span><br><span class="line">    # 选出的K个簇中心点</span><br><span class="line">    centCluster = data[centClusterindexs]</span><br><span class="line">    # print(&apos;选得簇邻近点坐标：&apos;)</span><br><span class="line">    # print(centCluster)</span><br><span class="line">    #所有样本到K个簇中心点的欧式距离,distmat=result</span><br><span class="line">    distmat = dist(data, centCluster)</span><br><span class="line">    # print(&apos;所有样本到K个簇中心点的欧式距离:&apos;)</span><br><span class="line">    # print(distmat)</span><br><span class="line">    # 得到距离后，进行分组（形参为：距离矩阵，聚类数目）</span><br><span class="line">    clustermat = group(distmat, K)</span><br><span class="line"></span><br><span class="line">    return clustermat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getcentCluster(preCluster,K):</span><br><span class="line"></span><br><span class="line">    centCluster=np.zeros((K,2))</span><br><span class="line"></span><br><span class="line">    cls=preCluster.groupby(by=preCluster.index)</span><br><span class="line">    for i in range(K):</span><br><span class="line">        centCluster[i]=np.sum(data[cls.get_group(i).values],axis=0)/len(cls.get_group(i))</span><br><span class="line">    #centCluster 为坐标矩阵</span><br><span class="line">    return centCluster</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def kmeansClassfier(input,K):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    1. 随机选择k个簇中心点</span><br><span class="line">    2. 分组:通过欧式距离来分组</span><br><span class="line">    3. 重新计算簇中心</span><br><span class="line">    4. 重复步骤2,3 直到收敛（收敛的充分必要条件为:分组连续两次不再改变。必要条件为：聚类中心连续两次不在改变）</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    # 初始化，先分组</span><br><span class="line">    initmat=initCluster(data,K)</span><br><span class="line">    # print(len(initmat))</span><br><span class="line">    print(&apos;初始化分组的结果为：&apos;)</span><br><span class="line">    #Seriez 的 索引表示该样本所属的类别（0,1,2,...K类）,对应的表示样本的索引</span><br><span class="line">    print(initmat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    changeCluster=True</span><br><span class="line">    clustermat = initmat.copy()</span><br><span class="line">    countCluster=1</span><br><span class="line">    while changeCluster:</span><br><span class="line">        preCluster = clustermat</span><br><span class="line">        # 重新计算聚类中心 坐标）</span><br><span class="line">        centCluster=getcentCluster(preCluster,K)</span><br><span class="line"></span><br><span class="line">        distmat=dist(data,centCluster)</span><br><span class="line"></span><br><span class="line">        clustermat= group(distmat,K)</span><br><span class="line"></span><br><span class="line">        countCluster+=1</span><br><span class="line"></span><br><span class="line">        # print(&apos;clustermat&apos;)</span><br><span class="line">        # print(type(clustermat))</span><br><span class="line">        # print(clustermat)</span><br><span class="line">        # print(&apos;preCluster&apos;)</span><br><span class="line">        # print(type(preCluster))</span><br><span class="line">        # print(preCluster)</span><br><span class="line"></span><br><span class="line">        # 这里有个大问题:我认为分组不再改变，便是收敛。其实是错误的。</span><br><span class="line">        if (clustermat.index  == preCluster.index ).all() and (clustermat.values  == preCluster.values ).all():</span><br><span class="line">            changeCluster=False</span><br><span class="line">        else:</span><br><span class="line">            changeCluster=True</span><br><span class="line"></span><br><span class="line">    print(&apos;聚类次数：&apos; ,countCluster)</span><br><span class="line">    print(countCluster)</span><br><span class="line">    # print(countCluster)</span><br><span class="line"></span><br><span class="line">    # 聚类后的结果显示（不同的聚类用不同的颜色表示）：</span><br><span class="line">    classes=clustermat.groupby(by=clustermat.index)</span><br><span class="line">    plt.figure()</span><br><span class="line">    for i in range (K):</span><br><span class="line">        plt.scatter(data[classes.get_group(i).values][:,0],data[classes.get_group(i).values][:,1],edgecolors=&apos;red&apos;)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    ## plt.scatter 散点图</span><br><span class="line">    plt.figure(figsize=(8,8))</span><br><span class="line">    plt.scatter(data[:,0],data[:,1],label=&apos;scatter&apos;)</span><br><span class="line">    plt.legend(loc=&apos;best&apos;)</span><br><span class="line"></span><br><span class="line">    # plt.xlim((-15,15))</span><br><span class="line">    # plt.ylim((-15,15))</span><br><span class="line">    # plt.xlabel(&apos;x axis&apos;)</span><br><span class="line">    # plt.ylabel(&apos;y axis&apos;)</span><br><span class="line">    # plt.xticks(np.linspace(-15,15,31))</span><br><span class="line">    # plt.yticks(np.linspace(-15,15,31))</span><br><span class="line">    # ax=plt.gca()</span><br><span class="line">    # ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)</span><br><span class="line">    # ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line">    # ax.xaxis.set_ticks_position(&apos;bottom&apos;)</span><br><span class="line">    # ax.yaxis.set_ticks_position(&apos;left&apos;)</span><br><span class="line">    # ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;,0))</span><br><span class="line">    # ax.spines[&apos;left&apos;].set_position((&apos;data&apos;,0))</span><br><span class="line">    #显示聚类前的图</span><br><span class="line">    plt.show()</span><br><span class="line">    # print(data)</span><br><span class="line">    # print(data.shape)</span><br><span class="line">    #</span><br><span class="line">    K=3</span><br><span class="line">    kmeansClassfier(data,K)</span><br></pre></td></tr></table></figure><p>实验结果分析：<br>聚类前数据分布：<br><img src="/2019/10/16/分类算法概述/precluster.png" alt="聚类前数据分布"></p><p>正确的聚类结果：<br><img src="/2019/10/16/分类算法概述/corcluster.png" alt="正确的聚类结果"></p><p>通过做实验我们发现 当我们的样本 实际上 聚类结果是 显然的，如我们产生如下数据集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">G1 = np.random.randn(300, 2) + 10</span><br><span class="line">G2 = np.random.randn(300, 2)</span><br><span class="line">G3 = np.random.randn(3000, 2) - 10</span><br><span class="line">data = np.row_stack((G1, G2, G3))</span><br></pre></td></tr></table></figure></p><p>显然 G1 G2 G3 各为一类，但是当我初始化簇中心都选在G1上,这样就会导致 G1被分为两类，G2 G3 被划分到一类。 这显然错误了。所以我们需要一个好的选择初始簇中心的方法。所以产生如下错误聚类结果：</p><p>不理想（错误）的聚类结果:<br><img src="/2019/10/16/分类算法概述/facluster.png" alt="不理想（错误）的结果"></p><h2 id="Kmeans的评价指标："><a href="#Kmeans的评价指标：" class="headerlink" title="Kmeans的评价指标："></a>Kmeans的评价指标：</h2><script type="math/tex; mode=display">\sum_{1}^{k}\sum_{P\varepsilon X_{i}}||{X_{i}-P}||_{2}</script><p>其中<script type="math/tex">C_{i}</script>表示簇中心点</p><p>由上述可知，初始化随机选择的簇中心点对我们的算法影响效果巨大，所以我们加入Kmeans的评价指标，经过多轮迭代，找出最好的一组聚类结果。参考代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"># G1 = np.random.randn(300, 2) + 10</span><br><span class="line"># G2 = np.random.randn(300, 2)</span><br><span class="line"># G3 = np.random.randn(300, 2) - 10</span><br><span class="line"># G4 = np.random.randn(300,2)-np.array([10,-10])</span><br><span class="line"># data = np.row_stack((G1, G2, G3))</span><br><span class="line">data=np.random.randint(1000,size=(1000,2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#计算欧式距离</span><br><span class="line">def dist(source,dest):</span><br><span class="line">    #K表聚类数目</span><br><span class="line">    K=dest.shape[0]</span><br><span class="line"></span><br><span class="line">    # result存放每个样本到簇中心的欧式距离，result[i,j]表示第i个样本点与第j个簇中心点之间的欧氏距离</span><br><span class="line">    result = np.zeros((source.shape[0],K))</span><br><span class="line"></span><br><span class="line">    for i in range(K):</span><br><span class="line">        result[:,i] = np.sqrt(np.sum(np.square(source-dest[i]),axis=1))</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分组</span><br><span class="line">def group(distmat,K):</span><br><span class="line">    distindex=np.argsort(distmat,axis=1)</span><br><span class="line">    # 找出所有数据离哪个簇中心的距离最短</span><br><span class="line">    mindist=distindex[:,0]</span><br><span class="line">    # print(&apos;找出所有数据离哪个簇中心的距离最短:&apos;)</span><br><span class="line">    # print(mindist)</span><br><span class="line">    clusters=pd.Series(np.arange(distmat.shape[0]),index=mindist)</span><br><span class="line">    # print(clusters)</span><br><span class="line">    return clusters</span><br><span class="line"></span><br><span class="line">def initCluster(data,K):</span><br><span class="line">    #随机选出K个簇中心点的下表</span><br><span class="line">    centClusterindexs = np.random.choice(data.shape[0] - 1, K,replace=False)</span><br><span class="line">    # print(&apos;选得簇中心点下标：&apos;,centClusterindexs)</span><br><span class="line">    # 选出的K个簇中心点</span><br><span class="line">    centCluster = data[centClusterindexs]</span><br><span class="line">    # print(&apos;选得簇邻近点坐标：&apos;)</span><br><span class="line">    # print(centCluster)</span><br><span class="line">    #所有样本到K个簇中心点的欧式距离,distmat=result</span><br><span class="line">    distmat = dist(data, centCluster)</span><br><span class="line">    # print(&apos;所有样本到K个簇中心点的欧式距离:&apos;)</span><br><span class="line">    # print(distmat)</span><br><span class="line">    # 得到距离后，进行分组（形参为：距离矩阵，聚类数目）</span><br><span class="line">    clustermat = group(distmat, K)</span><br><span class="line">    return clustermat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getcentCluster(preCluster,K):</span><br><span class="line"></span><br><span class="line">    centCluster=np.zeros((K,2))</span><br><span class="line">    cls=preCluster.groupby(by=preCluster.index)</span><br><span class="line">    for i in range(K):</span><br><span class="line">        centCluster[i]=np.sum(data[cls.get_group(i).values],axis=0)/len(cls.get_group(i))</span><br><span class="line">    #centCluster 为坐标矩阵</span><br><span class="line">    return centCluster</span><br><span class="line"></span><br><span class="line">def kmeansClassfier(input,K):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    1. 随机选择k个簇中心点</span><br><span class="line">    2. 分组:通过欧式距离来分组</span><br><span class="line">    3. 重新计算簇中心</span><br><span class="line">    4. 重复步骤2,3 直到收敛</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    # 初始化，先分组</span><br><span class="line">    initmat=initCluster(data,K)</span><br><span class="line">    changeCluster=True</span><br><span class="line">    clustermat = initmat.copy()</span><br><span class="line">    countCluster=1</span><br><span class="line">    while changeCluster:</span><br><span class="line">        preCluster = clustermat</span><br><span class="line">        # 重新计算聚类中心 坐标）</span><br><span class="line">        centCluster = getcentCluster(preCluster,K)</span><br><span class="line"></span><br><span class="line">        distmat = dist(data,centCluster)</span><br><span class="line"></span><br><span class="line">        clustermat = group(distmat,K)</span><br><span class="line"></span><br><span class="line">        countCluster+=1</span><br><span class="line"></span><br><span class="line">        ### 算法核心,收敛判断 :连续两次分组不在改变</span><br><span class="line"></span><br><span class="line">        if (clustermat.index  == preCluster.index ).all() and (clustermat.values  == preCluster.values ).all():</span><br><span class="line">            # lossKmeans()</span><br><span class="line">            changeCluster=False</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            changeCluster=True</span><br><span class="line"></span><br><span class="line">    # # 聚类后的结果显示（不同的聚类用不同的颜色表示）：</span><br><span class="line">    # classes=clustermat.groupby(by=clustermat.index)</span><br><span class="line">    # plt.figure()</span><br><span class="line">    # for i in range (K):</span><br><span class="line">    #     plt.scatter(data[classes.get_group(i).values][:,0],data[classes.get_group(i).values][:,1])</span><br><span class="line">    # plt.show()</span><br><span class="line">    return clustermat,centCluster</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def lossKmeans(clustermat,centCluster):</span><br><span class="line">    #计算各个簇内的所有欧拉距离,我们希望簇内欧拉距离尽可能小</span><br><span class="line">    K=centCluster.shape[0]</span><br><span class="line">    grops=clustermat.groupby(by=clustermat.index)</span><br><span class="line">    sumloss=0</span><br><span class="line">    for i in range(K):</span><br><span class="line">        sumloss+=np.sum(np.square(np.sum(np.square(data[grops.get_group(i).values]-centCluster[i]),axis=1)),axis=0)</span><br><span class="line">    return sumloss</span><br><span class="line"></span><br><span class="line">    #还可以计算不同簇内的相关度，我们希望不同的簇相关度尽可能低</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    ## plt.scatter 散点图</span><br><span class="line">    plt.figure(figsize=(8,8))</span><br><span class="line">    plt.scatter(data[:,0],data[:,1],label=&apos;scatter&apos;)</span><br><span class="line">    plt.legend(loc=&apos;best&apos;)</span><br><span class="line"></span><br><span class="line">    #显示聚类前的图</span><br><span class="line">    plt.show()</span><br><span class="line">    K=3</span><br><span class="line">    lossrecord=[]</span><br><span class="line">    #改进：进行n轮迭代（这里我们设为100轮）,找出其中评价最好的一轮作为最终结果</span><br><span class="line">    for i in range(100):</span><br><span class="line"></span><br><span class="line">        clusterResult=kmeansClassfier(data,K)</span><br><span class="line">        clustermat,centCluster=clusterResult</span><br><span class="line">        loss=lossKmeans(clustermat,centCluster)</span><br><span class="line">        lossrecord.append([loss,clustermat,centCluster])</span><br><span class="line">    minloss=lossrecord[0][0]</span><br><span class="line">    index=0</span><br><span class="line">    for i in range(1,len(lossrecord)):</span><br><span class="line">        print(lossrecord[i][0])</span><br><span class="line">        if(lossrecord[i][0]&lt;minloss):</span><br><span class="line">            minloss=lossrecord[i][0]</span><br><span class="line">            index=i</span><br><span class="line"></span><br><span class="line">    print(&apos;loss最小值为：&apos;, index)</span><br><span class="line">    clustermat=lossrecord[index][1]</span><br><span class="line">    classes = clustermat.groupby(by=clustermat.index)</span><br><span class="line">    plt.figure(figsize=(8,8))</span><br><span class="line">    for i in range(K):</span><br><span class="line">        plt.scatter(data[classes.get_group(i).values][:, 0], data[classes.get_group(i).values][:, 1])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></p><p>经过改进，我们的粗糙的算法实验效果基本达标。不会出现上述的错误聚类情况了。</p><p>参考资料：<br><a href="https://wizardforcel.gitbooks.io/dm-algo-top10/content/k-means.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/dm-algo-top10/content/k-means.html</a></p><p><a href="https://blog.csdn.net/u013719780/article/details/51755124" target="_blank" rel="noopener">https://blog.csdn.net/u013719780/article/details/51755124</a></p><h1 id="第三章-SVM算法"><a href="#第三章-SVM算法" class="headerlink" title="第三章 SVM算法"></a>第三章 SVM算法</h1><h1 id="第四章-C4-5分类树"><a href="#第四章-C4-5分类树" class="headerlink" title="第四章 C4.5分类树"></a>第四章 C4.5分类树</h1><h1 id="第五章-基于浅层神经网络的分类器"><a href="#第五章-基于浅层神经网络的分类器" class="headerlink" title="第五章 基于浅层神经网络的分类器"></a>第五章 基于浅层神经网络的分类器</h1><h1 id="第六章-贝叶斯分类器"><a href="#第六章-贝叶斯分类器" class="headerlink" title="第六章 贝叶斯分类器"></a>第六章 贝叶斯分类器</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-KNN算法&quot;&gt;&lt;a href=&quot;#第一章-KNN算法&quot; class=&quot;headerlink&quot; title=&quot;第一章 KNN算法&quot;&gt;&lt;/a&gt;第一章 KNN算法&lt;/h1&gt;&lt;h2 id=&quot;1-1-问题定义：&quot;&gt;&lt;a href=&quot;#1-1-问题定义：&quot; class=&quot;headerlink&quot; title=&quot;1.1 问题定义：&quot;&gt;&lt;/a&gt;1.1 问题定义：&lt;/h2&gt;&lt;p&gt;给定m个已被分为Cn类个样本[监督算法],对未标记类别的测试数据data求其所属类别？&lt;/p&gt;&lt;h2 id=&quot;1-2-算法描述：&quot;&gt;&lt;a href=&quot;#1-2-算法描述：&quot; class=&quot;headerlink&quot; title=&quot;1.2 算法描述：&quot;&gt;&lt;/a&gt;1.2 算法描述：&lt;/h2&gt;&lt;p&gt;1）计算测试数据与各个训练数据之间的距离；&lt;/p&gt;&lt;p&gt;2）按照距离的递增关系进行排序；&lt;/p&gt;&lt;p&gt;3）选取距离最小的K个点；&lt;/p&gt;&lt;p&gt;4）确定前K个点所在类别的出现频率；&lt;/p&gt;
    
    </summary>
    
    
      <category term="ML" scheme="https://ahpuchend.github.io/categories/ML/"/>
    
    
      <category term="classifier" scheme="https://ahpuchend.github.io/tags/classifier/"/>
    
  </entry>
  
  <entry>
    <title>pandas 入门</title>
    <link href="https://ahpuchend.github.io/2019/10/15/pandas-%E5%85%A5%E9%97%A8/"/>
    <id>https://ahpuchend.github.io/2019/10/15/pandas-入门/</id>
    <published>2019-10-15T12:29:33.000Z</published>
    <updated>2019-10-15T12:30:56.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-Series"><a href="#第1章-Series" class="headerlink" title="第1章 Series()"></a>第1章 Series()</h1><h2 id="1-1Series的创建"><a href="#1-1Series的创建" class="headerlink" title="1.1Series的创建"></a>1.1Series的创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">##numpy</span><br><span class="line">a=np.arange(16)</span><br><span class="line">se=pd.Series(a,index=pd.date_range(&apos;20191012&apos;,periods=16))</span><br><span class="line">print(se)</span><br><span class="line">print(se[&apos;20191024&apos;])</span><br><span class="line">## python dict</span><br><span class="line">dic=&#123;&apos;name&apos;:&apos;chendong&apos;,&apos;age&apos;:22,&apos;gender&apos;:&apos;男&apos;&#125;</span><br><span class="line">se1=pd.Series(dic)</span><br><span class="line">print(se1)</span><br><span class="line">## python list</span><br><span class="line">lis=[&apos;hello&apos;,&apos;world&apos;,1,2,3]</span><br><span class="line">se2=pd.Series(lis)</span><br><span class="line">print(se2)</span><br><span class="line"># 标量值</span><br><span class="line">se3=pd.Series(3,name=&apos;hw&apos;)</span><br><span class="line">print(se3)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="1-2-Series的索引"><a href="#1-2-Series的索引" class="headerlink" title="1.2 Series的索引"></a>1.2 Series的索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import  numpy as np</span><br><span class="line">a=np.arange(16)</span><br><span class="line">se=pd.Series(a,index=pd.date_range(&apos;20191012&apos;,periods=16))</span><br><span class="line">print(se)</span><br><span class="line">print(&apos;---------------&apos;)</span><br><span class="line">print(se[0]) #0</span><br><span class="line">print(se[1]) #1</span><br><span class="line">print(se[2]) #2</span><br><span class="line">print(&apos;----------------&apos;)</span><br><span class="line">print(se[0:2]) ## 包括index</span><br><span class="line">print(&apos;----------------&apos;)</span><br><span class="line">print(se.values) #&lt;class &apos;numpy.ndarray&apos;&gt;</span><br><span class="line">print(&apos;----------------&apos;)</span><br><span class="line">print(type(se.values))</span><br><span class="line">b=se.values.reshape(4,4)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import  numpy as np</span><br><span class="line">s = pd.Series(np.random.randn(5), index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;])</span><br><span class="line">print(s)</span><br><span class="line">print(type(s))</span><br><span class="line">print(&apos;-----------&apos;)</span><br><span class="line">print(s.values) </span><br><span class="line">print(&apos;-----------&apos;)</span><br><span class="line">print(type(s.values)) ## &lt;class &apos;numpy.ndarray&apos;&gt;</span><br><span class="line">##将s的类型&lt;class &apos;pandas.core.series.Series&apos;&gt;转化为&lt;class &apos;numpy.ndarray&apos;&gt;</span><br><span class="line">a=s.to_numpy()</span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br><span class="line">print(s.index)</span><br><span class="line">#索引和切片</span><br><span class="line">print(s[0])</span><br><span class="line">print(s[:3])</span><br><span class="line">#多个索引</span><br><span class="line">print(s[[4,3,1]])</span><br><span class="line">#布尔选择</span><br><span class="line">print(s[s&gt;s.median()])</span><br><span class="line"></span><br><span class="line">print(s.array)</span><br><span class="line">print(type(s.array)) #&lt;class &apos;pandas.core.arrays.numpy_.PandasArray&apos;&gt;</span><br><span class="line">arr=s.array</span><br><span class="line">for i in range(len(arr)):</span><br><span class="line">    print(arr[i])</span><br></pre></td></tr></table></figure><h1 id="第2章-DataFrame的增删查改"><a href="#第2章-DataFrame的增删查改" class="headerlink" title="第2章 DataFrame的增删查改"></a>第2章 DataFrame的增删查改</h1><h2 id="2-1-DataFrame的创建"><a href="#2-1-DataFrame的创建" class="headerlink" title="2.1.DataFrame的创建"></a>2.1.DataFrame的创建</h2><h3 id="2-1-1-由python的列表、字典以及numpy创建"><a href="#2-1-1-由python的列表、字典以及numpy创建" class="headerlink" title="2.1.1 由python的列表、字典以及numpy创建"></a>2.1.1 由python的列表、字典以及numpy创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">## 由python list创建</span><br><span class="line">lis=[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]</span><br><span class="line">df=pd.DataFrame(lis)</span><br><span class="line"></span><br><span class="line">## 由python 字典创建</span><br><span class="line">dic=&#123;&apos;A&apos;:[1,2,3],&apos;B&apos;:[4,5,6],&apos;C&apos;:[7,8,9]&#125;</span><br><span class="line">df1=pd.Dataframe(dic，index=list(&apos;abc))</span><br><span class="line"></span><br><span class="line">## 由numpy创建</span><br><span class="line">arr=np.arange(20).reshape(5,4)</span><br><span class="line">df2=pd.DataFrame(arr)</span><br><span class="line">df3=pd.DataFrame(np.random.rand(6,4),index=dates,columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br></pre></td></tr></table></figure><h3 id="2-1-2-由Series创建"><a href="#2-1-2-由Series创建" class="headerlink" title="2.1.2 由Series创建"></a>2.1.2 由Series创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">s1=pd.Series([1,3,4,5,6,8],index=list(&apos;ABCDEF&apos;),dtype=&apos;int32&apos;)</span><br><span class="line">print(s1)</span><br><span class="line">s2=pd.Series([1,3,4,np.nan,6,8],index=list(&apos;ABCDEF&apos;))</span><br><span class="line">print(s2)</span><br><span class="line">df=pd.DataFrame([s1,s2])</span><br><span class="line">print(df.T)</span><br><span class="line"></span><br><span class="line">s3=pd.Series(np.array([1,2,3,4,5]),index=pd.date_range(&apos;20191011&apos;,periods=5))</span><br><span class="line">s4=pd.Series(np.array([7,8,9,10,11]),index=pd.date_range(&apos;20191011&apos;,periods=5))</span><br><span class="line">print(s3)</span><br><span class="line">print(s4)</span><br><span class="line">df2=pd.DataFrame([s3,s4])</span><br><span class="line">print(df2.T)</span><br></pre></td></tr></table></figure><p><b>小结：由字典和Series来创建DataFrame,他们的key都变为DataFrame的列属性</b></p><h3 id="2-1-3-从excel表格和csv文件读取创建"><a href="#2-1-3-从excel表格和csv文件读取创建" class="headerlink" title="2.1.3 从excel表格和csv文件读取创建"></a>2.1.3 从excel表格和csv文件读取创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#从excel表格中读取多张表格，然后从多张表格中筛选需要的数据</span><br><span class="line">import pandas as pd</span><br><span class="line">xsls=pd.read_excel(r&apos;C:\Users\chend\Documents\Tencent Files\2570808391\FileRecv\学生导师双选结果.xlsx&apos;,header=0,sheet_name=None)#</span><br><span class="line">table=list(xsls.values())</span><br><span class="line">for i in range(len(table)):</span><br><span class="line">    print(type(table[i]))</span><br><span class="line">    df=table[i]</span><br><span class="line">    print(df.loc[df[&apos;拟定导师&apos;]==&apos;李伟&apos;])</span><br><span class="line"></span><br><span class="line">#读取的excel文件的数据类型为 &lt;class &apos;collections.OrderedDict&apos;&gt;（即xsls为OrderedDict类型,其中的多张表格类型为DataFrame,为了方便处理，我们先要将xsls转换为list类型</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#从CSV文件中读数据,直接用python的open来读文件，用pd.read_csv()来读取可能会出现编码错误。</span><br><span class="line">import pandas as pd</span><br><span class="line">with open(r&apos;C:\Users\chend\Documents\Tencent Files\2570808391\FileRecv\爱奇艺视频数据.csv&apos;) as f:</span><br><span class="line">    txt=f.readlines()</span><br><span class="line">    print(type(txt)) #class list</span><br><span class="line">    pd.set_option(&apos;display.max_colwidth&apos;,500)</span><br><span class="line">    df=pd.DataFrame(txt)</span><br><span class="line">    print(df)</span><br><span class="line"></span><br><span class="line">#利用df.to_css()写入csv文件和pd.read_csv()读取csv文件</span><br><span class="line">data=[[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">df=pd.DataFrame(data,index=list(&apos;ABC&apos;),columns=list(&apos;abc&apos;))</span><br><span class="line">df.to_csv(&apos;data.cvs&apos;)</span><br><span class="line">df=pd.read_csv(&apos;data.cvs&apos;)</span><br><span class="line">print(df.values,type(df.values))</span><br><span class="line">crr=df.values</span><br><span class="line">print(crr)</span><br><span class="line">drr=crr[:,1:]</span><br><span class="line">print(drr)</span><br><span class="line">df1=pd.DataFrame(drr,index=list(&apos;ABC&apos;),columns=list(&apos;abc&apos;))</span><br><span class="line">print(df1)</span><br></pre></td></tr></table></figure><h2 id="2-2-DataFrame的选择"><a href="#2-2-DataFrame的选择" class="headerlink" title="2.2 DataFrame的选择"></a>2.2 DataFrame的选择</h2><h3 id="2-2-1-按标签选择"><a href="#2-2-1-按标签选择" class="headerlink" title="2.2.1 按标签选择"></a>2.2.1 按标签选择</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import  numpy as np</span><br><span class="line">dates=pd.date_range(&apos;20191012&apos;,periods=6)</span><br><span class="line">df=pd.DataFrame(np.random.rand(6,4),index=dates,columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class="line">print(df)</span><br><span class="line">#按标签选择</span><br><span class="line">print(&apos;按标签选择&apos;)</span><br><span class="line">#loc[,] 参数可以为单个标签，多个标签，切片,布尔值</span><br><span class="line"></span><br><span class="line">#通过行索引选择行</span><br><span class="line">print(df.loc[&apos;20191012&apos;])</span><br><span class="line"></span><br><span class="line">#通过列索引选择列</span><br><span class="line">print(df.loc[:,[&apos;col1&apos;,&apos;col2&apos;]])</span><br><span class="line"></span><br><span class="line">#通过多个标签来选择</span><br><span class="line">print(df.loc[pd.date_range(&apos;20191012&apos;,periods=2)])</span><br><span class="line">print(&apos;-------------------&apos;)</span><br><span class="line">print(df.loc[pd.date_range(&apos;20191012&apos;,periods=2),[&apos;col3&apos;,&apos;col4&apos;]])</span><br><span class="line"></span><br><span class="line">#通过切片来选择</span><br><span class="line">print(df.loc[&apos;20191012&apos;:&apos;20191014&apos;,[&apos;col3&apos;,&apos;col4&apos;]])</span><br><span class="line"></span><br><span class="line">#通过布尔列表选择</span><br><span class="line">print(df.loc[[False,True]])</span><br><span class="line"></span><br><span class="line">#通过布尔值选择</span><br><span class="line">print(df.loc[df[&apos;col4&apos;]&gt;0.5000]) #这种选择很重要</span><br><span class="line"></span><br><span class="line">#通过lambda函数选择</span><br><span class="line">print(df.loc[lambda df: df[&apos;col4&apos;]&gt;0.500])</span><br><span class="line"></span><br><span class="line">#通过布尔值和多索引来选择</span><br><span class="line">print(df.loc[df[&apos;col4&apos;]&gt;0.40,[&apos;col3&apos;,&apos;col4&apos;]])</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(&#123;&apos;a&apos;: [0, 1, 2, 3, 4, 5, 6, 7],</span><br><span class="line">                   &apos;b&apos;: [5, 5, 2, 2, 5, 5, 2, 2],</span><br><span class="line">                   &apos;c&apos;: [0, 0, 0, 0, 0, 0, 0, 0]&#125;)</span><br><span class="line">mask = (df1[&apos;a&apos;] &lt; 7) &amp; (df1[&apos;b&apos;] == 2)</span><br><span class="line">print(df1.loc[mask,&apos;c&apos;].iloc[0:3])</span><br></pre></td></tr></table></figure><p><b>pandas.DataFrame.loc[]功能强大，本质就是先对df的行依次遍历，返回True或者False,留下True,最后再选择要显示的列</b></p><h3 id="2-2-2-按位置选择"><a href="#2-2-2-按位置选择" class="headerlink" title="2.2.2 按位置选择"></a>2.2.2 按位置选择</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import  numpy as np</span><br><span class="line">dates=pd.date_range(&apos;20191012&apos;,periods=6)</span><br><span class="line">df=pd.DataFrame(np.random.rand(6,4),index=dates,columns=[&apos;col1&apos;,&apos;col2&apos;,&apos;col3&apos;,&apos;col4&apos;])</span><br><span class="line">print(df)</span><br><span class="line">print(&apos;按位置选择&apos;)</span><br><span class="line"></span><br><span class="line">#单个位置</span><br><span class="line">print(df.iloc[0])</span><br><span class="line">print(df.iloc[1,1])</span><br><span class="line"></span><br><span class="line">#切片</span><br><span class="line">print(df.iloc[0:2])</span><br><span class="line">print(df.iloc[0:2,0:2])</span><br><span class="line"></span><br><span class="line">#多个位置列表</span><br><span class="line">print(df.iloc[[0,1,2]])</span><br><span class="line">print(df.iloc[[0,2,2],[0,1,2]])</span><br><span class="line"></span><br><span class="line">#按布尔值选择</span><br><span class="line">print(df.iloc[[True,False,True,False,True],[1,2]])</span><br><span class="line"></span><br><span class="line">#通过lambda函数选择</span><br><span class="line">print(df.iloc[lambda x: x.index==&apos;20191014&apos;])</span><br></pre></td></tr></table></figure><p><b>注意：pandas.DataFrame.iloc[]不支持df.iloc[df[‘col4’]&gt;0.4]这样的形式</b></p><h3 id="2-2-3-按布尔选择"><a href="#2-2-3-按布尔选择" class="headerlink" title="2.2.3 按布尔选择"></a>2.2.3 按布尔选择</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">dic=&#123;&apos;A&apos;:[1,2,3,4,5,6],</span><br><span class="line">     &apos;B&apos;:[2,3,4,5,6,7],</span><br><span class="line">     &apos;C&apos;:[3,4,5,6,7,8]&#125;</span><br><span class="line">df1=pd.DataFrame(dic,index=list(&apos;abcdef&apos;))</span><br><span class="line">print(df1)</span><br><span class="line">df1[&apos;D&apos;]=[&apos;one&apos;,&apos;two&apos;,&apos;three&apos;,&apos;four&apos;,&apos;five&apos;,&apos;six&apos;]</span><br><span class="line">print(&apos;按布尔索引&apos;)</span><br><span class="line">print(df1)</span><br><span class="line">print(&apos;====================&apos;)</span><br><span class="line">print(df1[df1[&apos;C&apos;]&gt;5])</span><br><span class="line">print(df1[df1[&apos;D&apos;].isin([&apos;one&apos;,&apos;two&apos;])])</span><br><span class="line">print(&apos;---------------&apos;)</span><br><span class="line">print(df1[df1[&apos;C&apos;].isin([3,4])])</span><br></pre></td></tr></table></figure><h2 id="2-3-DataFrame的赋值（增加）"><a href="#2-3-DataFrame的赋值（增加）" class="headerlink" title="2.3 DataFrame的赋值（增加）"></a>2.3 DataFrame的赋值（增加）</h2><h3 id="2-3-1-DataFrame按行按列增加"><a href="#2-3-1-DataFrame按行按列增加" class="headerlink" title="2.3.1 DataFrame按行按列增加"></a>2.3.1 DataFrame按行按列增加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">dic=&#123;&apos;A&apos;:[1,2,3,4,5,6],</span><br><span class="line">     &apos;B&apos;:[2,3,4,5,6,7],</span><br><span class="line">     &apos;C&apos;:[3,4,5,6,7,8]&#125;</span><br><span class="line">df1=pd.DataFrame(dic,index=list(&apos;abcdef&apos;))</span><br><span class="line">print(df1)</span><br><span class="line">#按行增加</span><br><span class="line">df1.loc[&apos;g&apos;]=[7,8,9]</span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line">#按列增加</span><br><span class="line">df[&apos;D&apos;]=list(&apos;listlil&apos;)</span><br></pre></td></tr></table></figure><h3 id="2-3-2-两个或者多个DataFrame的合并"><a href="#2-3-2-两个或者多个DataFrame的合并" class="headerlink" title="2.3.2 两个或者多个DataFrame的合并"></a>2.3.2 两个或者多个DataFrame的合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pd.concat()</span><br><span class="line">import pandas as pd</span><br><span class="line">import  numpy as np</span><br><span class="line">df=pd.DataFrame(np.random.randn(10,4))</span><br><span class="line">df1=pd.DataFrame(np.random.randn(2,4))</span><br><span class="line">df2=pd.DataFrame(np.random.randn(2,4))</span><br><span class="line">pf=pd.concat([df,df1,df2],ignore_index=True)</span><br></pre></td></tr></table></figure><h3 id="2-3-3-DataFrame的追加"><a href="#2-3-3-DataFrame的追加" class="headerlink" title="2.3.3 DataFrame的追加"></a>2.3.3 DataFrame的追加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pd.append()</span><br><span class="line">import pandas as pd</span><br><span class="line">import  numpy as np</span><br><span class="line">df = pd.DataFrame(np.random.randn(8, 4), columns=[&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;])</span><br><span class="line">s=df.iloc[3]</span><br><span class="line">pf=df.append(s,ignore_index=True)</span><br><span class="line">print(df)</span><br><span class="line">print(pf)</span><br><span class="line"></span><br><span class="line">##一次性append多行</span><br><span class="line">s1=df.iloc[3:]</span><br><span class="line">pf=df.append(s1,ignore_index=True)</span><br><span class="line">print(pf)</span><br></pre></td></tr></table></figure><h3 id="2-3-4-SQL凤格的DataFrame合并"><a href="#2-3-4-SQL凤格的DataFrame合并" class="headerlink" title="2.3.4 SQL凤格的DataFrame合并"></a>2.3.4 SQL凤格的DataFrame合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#pd.merge() </span><br><span class="line">import pandas as pd</span><br><span class="line">left = pd.DataFrame(&#123;&apos;key&apos;: [&apos;foo&apos;, &apos;bar&apos;], &apos;lval&apos;: [1, 2],&apos;olval&apos;:[100,101]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;&apos;key&apos;: [&apos;foo&apos;, &apos;foo&apos;], &apos;rval&apos;: [4, 5]&#125;)</span><br><span class="line"></span><br><span class="line">pp=pd.merge(left,right,on=&apos;key&apos;,how=&apos;outer&apos;) #相当于数据库的外连接</span><br><span class="line">pp1=pd.merge(left,right,on=&apos;key&apos;,how=&apos;inner&apos;) # 两个key的交集</span><br><span class="line">pp2=pd.merge(left,right,on=&apos;key&apos;,how=&apos;left&apos;)#相当于数据库的左连接</span><br><span class="line">pp3=pd.merge(left,right,on=&apos;key&apos;,how=&apos;right&apos;)#相当于数据库的右连接</span><br><span class="line"></span><br><span class="line">print(pp)</span><br><span class="line">print(pp1)</span><br><span class="line">print(pp2)</span><br><span class="line">print(pp3)</span><br></pre></td></tr></table></figure><h2 id="2-4-DataFrame的修改-更新"><a href="#2-4-DataFrame的修改-更新" class="headerlink" title="2.4 DataFrame的修改(更新)"></a>2.4 DataFrame的修改(更新)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#通过标签修改</span><br><span class="line">dic=&#123;&apos;A&apos;:[1,2,3,4,5,6],</span><br><span class="line">     &apos;B&apos;:[2,3,4,5,6,7],</span><br><span class="line">     &apos;C&apos;:[3,4,5,6,7,8]&#125;</span><br><span class="line">df1=pd.DataFrame(dic,index=list(&apos;abcdef&apos;))</span><br><span class="line">df1.loc[&apos;a&apos;]=[100,101,102,103]</span><br><span class="line">print(df1)</span><br><span class="line">df1.loc[&apos;a&apos;,&apos;A&apos;]=1000</span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line">#通过位置修改</span><br><span class="line">df1.iloc[0]=[200,201,202,np.nan]</span><br><span class="line">print(df1)</span><br></pre></td></tr></table></figure><h2 id="2-5-DataFrame的删除"><a href="#2-5-DataFrame的删除" class="headerlink" title="2.5 DataFrame的删除"></a>2.5 DataFrame的删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#del</span><br><span class="line">#drop()</span><br><span class="line"></span><br><span class="line">dic=&#123;&apos;A&apos;:[1,2,3,4,5,6],</span><br><span class="line">     &apos;B&apos;:[2,3,4,5,6,7],</span><br><span class="line">     &apos;C&apos;:[3,4,5,6,7,8]&#125;</span><br><span class="line">df1=pd.DataFrame(dic,index=list(&apos;abcdef&apos;))</span><br><span class="line">df1[&apos;D&apos;]=list(&apos;listlil&apos;)</span><br><span class="line">#删除 整列</span><br><span class="line">del df1[&apos;D&apos;]</span><br><span class="line">df1=df1.drop(&apos;C&apos;,axis=1)</span><br><span class="line">print(df1)</span><br><span class="line">#删除 整行</span><br><span class="line">df1=df1.drop([&apos;g&apos;],axis=0)</span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line">#多行多列删除</span><br><span class="line">df1=df1.drop([&apos;C&apos;,&apos;D&apos;],axis=1) #多列删除</span><br><span class="line">df1=df1.drop([&apos;a&apos;,&apos;b&apos;],axis=0) #多行删除</span><br></pre></td></tr></table></figure><h1 id="2-6-空值nan的处理"><a href="#2-6-空值nan的处理" class="headerlink" title="2.6 空值nan的处理"></a>2.6 空值nan的处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;&apos;A&apos;:[1,2,3,4,5,6],</span><br><span class="line">     &apos;B&apos;:[2,3,4,5,6,7],</span><br><span class="line">     &apos;C&apos;:[3,4,5,6,7,8]&#125;</span><br><span class="line">df1=pd.DataFrame(dic,index=list(&apos;abcdef&apos;))</span><br><span class="line"></span><br><span class="line">df1[&apos;D&apos;]=[&apos;one&apos;,&apos;two&apos;,&apos;three&apos;,np.nan,&apos;five&apos;,np.nan]</span><br><span class="line">print(df1)</span><br><span class="line">#删除所有的nan所在的行</span><br><span class="line">df1=df1.dropna(how=&apos;any&apos;，axis=0)</span><br><span class="line">print(df1)</span><br><span class="line">#删除所有nans所在的列</span><br><span class="line">df1=df1.dropna(how=&apos;any&apos;,axis=1)</span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line">#将nan填充为默认值</span><br><span class="line">df1=df1.fillna(&apos;ok&apos;)</span><br><span class="line">print(df1)</span><br></pre></td></tr></table></figure><h1 id="第3章-pandas常见的统计量"><a href="#第3章-pandas常见的统计量" class="headerlink" title="第3章 pandas常见的统计量"></a>第3章 pandas常见的统计量</h1><h2 id="3-1-groupby"><a href="#3-1-groupby" class="headerlink" title="3.1 groupby"></a>3.1 groupby</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;&apos;A&apos;: [&apos;foo&apos;, &apos;bar&apos;, &apos;foo&apos;, &apos;bar&apos;,</span><br><span class="line">                            &apos;foo&apos;, &apos;bar&apos;, &apos;foo&apos;, &apos;foo&apos;],</span><br><span class="line">                       &apos;B&apos;: [&apos;one&apos;, &apos;one&apos;, &apos;two&apos;, &apos;three&apos;,</span><br><span class="line">                             &apos;two&apos;, &apos;two&apos;, &apos;one&apos;, &apos;three&apos;],</span><br><span class="line">                       &apos;C&apos;: np.random.randn(8),</span><br><span class="line">                       &apos;D&apos;: np.random.randn(8)&#125;)</span><br><span class="line">print(df)</span><br><span class="line">print(df.groupby(&apos;A&apos;).sum())</span><br><span class="line">print(df.groupby(&apos;B&apos;).sum())</span><br><span class="line">print(df.groupby([&apos;A&apos;,&apos;B&apos;]).sum())</span><br></pre></td></tr></table></figure><h2 id="3-2-描述性统计"><a href="#3-2-描述性统计" class="headerlink" title="3.2 描述性统计"></a>3.2 描述性统计</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mean()</span><br><span class="line">std()</span><br><span class="line">median()</span><br><span class="line">mode() 众数</span><br><span class="line">idxmax()/idxmin() 最大/小值索引</span><br></pre></td></tr></table></figure><h2 id="3-3-排序"><a href="#3-3-排序" class="headerlink" title="3.3 排序"></a>3.3 排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">     &apos;one&apos;: pd.Series(np.random.randn(3), index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]),</span><br><span class="line">     &apos;two&apos;: pd.Series(np.random.randn(4), index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]),</span><br><span class="line">     &apos;three&apos;: pd.Series(np.random.randn(3), index=[&apos;b&apos;, &apos;c&apos;, &apos;d&apos;])&#125;)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按列里的值排序</span><br><span class="line">df1 = pd.DataFrame(&#123;&apos;one&apos;: [2, 1, 1, 1],</span><br><span class="line">                    &apos;two&apos;: [1, 3, 2, 4],</span><br><span class="line">                    &apos;three&apos;: [5, 4, 3, 2]&#125;)</span><br><span class="line">print(df1)</span><br><span class="line">print(df1.sort_values(by=&apos;two&apos;))</span><br><span class="line"></span><br><span class="line">print(df1.sort_values(by=[&apos;one&apos;,&apos;two&apos;]))</span><br></pre></td></tr></table></figure><p>其他排序：#按索引标签排序 #按两种方式混合排序 </p><p>```</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.pypandas.cn/docs/getting_started/dsintro.html#%E6%95%B0%E6%8D%AE%E5%B8%A7" target="_blank" rel="noopener">https://www.pypandas.cn/docs/getting_started/dsintro.html#%E6%95%B0%E6%8D%AE%E5%B8%A7</a><br><a href="https://www.pypandas.cn/docs/getting_started/basics.html#%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener">https://www.pypandas.cn/docs/getting_started/basics.html#%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%93%8D%E4%BD%9C</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第1章-Series&quot;&gt;&lt;a href=&quot;#第1章-Series&quot; class=&quot;headerlink&quot; title=&quot;第1章 Series()&quot;&gt;&lt;/a&gt;第1章 Series()&lt;/h1&gt;&lt;h2 id=&quot;1-1Series的创建&quot;&gt;&lt;a href=&quot;#1-1Series的创建&quot; class=&quot;headerlink&quot; title=&quot;1.1Series的创建&quot;&gt;&lt;/a&gt;1.1Series的创建&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import pandas as pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##numpy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a=np.arange(16)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se=pd.Series(a,index=pd.date_range(&amp;apos;20191012&amp;apos;,periods=16))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(se)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(se[&amp;apos;20191024&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## python dict&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dic=&amp;#123;&amp;apos;name&amp;apos;:&amp;apos;chendong&amp;apos;,&amp;apos;age&amp;apos;:22,&amp;apos;gender&amp;apos;:&amp;apos;男&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se1=pd.Series(dic)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(se1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## python list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lis=[&amp;apos;hello&amp;apos;,&amp;apos;world&amp;apos;,1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se2=pd.Series(lis)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(se2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 标量值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se3=pd.Series(3,name=&amp;apos;hw&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(se3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://ahpuchend.github.io/categories/python/"/>
    
    
      <category term="pandas" scheme="https://ahpuchend.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>第五周-python数据统计</title>
    <link href="https://ahpuchend.github.io/2019/10/15/%E7%AC%AC%E4%BA%94%E5%91%A8-python%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/"/>
    <id>https://ahpuchend.github.io/2019/10/15/第五周-python数据统计/</id>
    <published>2019-10-15T12:25:19.000Z</published>
    <updated>2019-10-15T12:31:04.556Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import tushare as ts</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">sock=ts.get_hist_data(&apos;600036&apos;,start=&apos;2018-06-01&apos;,end=&apos;2018-12-31&apos;)</span><br><span class="line">sock1=pd.DataFrame(sock,columns=[&apos;open&apos;,&apos;high&apos;,&apos;close&apos;,&apos;low&apos;,&apos;volume&apos;])</span><br><span class="line">sock1=sock1.sort_values(&apos;date&apos;)</span><br><span class="line">print(sock1)</span><br><span class="line">print(&apos;输出这半年内成交量最低和最高那两天的日期和分别的成交量:&apos;)</span><br><span class="line">print(sock1.loc[sock1[&apos;volume&apos;]==sock1[&apos;volume&apos;].max()].loc[:,&apos;volume&apos;])</span><br><span class="line">print(sock1.loc[sock1[&apos;volume&apos;]==sock1[&apos;volume&apos;].min()].loc[:,&apos;volume&apos;])</span><br><span class="line"></span><br><span class="line">print(&apos;列出成交量在 1000000 以上的记录:&apos;)</span><br><span class="line">print(sock1.loc[sock1[&apos;volume&apos;]&gt;1000000])</span><br><span class="line"></span><br><span class="line">print(&apos;计算这半年中收盘价（close）高于开盘价（open）的天数:&apos;)</span><br><span class="line">print(sock1.loc[sock1[&apos;close&apos;]&gt;sock1[&apos;open&apos;]])</span><br><span class="line">print(&apos;天数：&apos;,sock1.loc[sock1[&apos;close&apos;]&gt;sock1[&apos;open&apos;]][&apos;open&apos;].count())</span><br><span class="line"></span><br><span class="line">print(&apos;&apos;&apos;计算前后两天开盘价的涨跌情况,用两种方式表示.</span><br><span class="line">第一种输出每两天之间的差值(后一天减去前一天),</span><br><span class="line">第二种输出一个开盘价涨跌列表,涨用 1 表示，跌用-1 表示。&apos;&apos;&apos;)</span><br><span class="line">openind=sock1[&apos;open&apos;].to_numpy()</span><br><span class="line">opendf1=pd.DataFrame(np.diff(openind))</span><br><span class="line">opendf2=pd.DataFrame(np.sign(np.diff(openind)))</span><br><span class="line">print(opendf1)</span><br><span class="line">print(opendf2)</span><br><span class="line"></span><br><span class="line">print(&apos; 计算每月收盘价的平均值: &apos;)</span><br><span class="line">print(sock1.index)</span><br><span class="line">months=[]</span><br><span class="line">print(sock1.index[0])</span><br><span class="line">for i in range(len(sock1.index)):</span><br><span class="line">    months.append(sock1.index[i].split(&apos;-&apos;)[1])</span><br><span class="line">print(len(months))</span><br><span class="line">print(months)</span><br><span class="line">print(&apos;----------------------------&apos;)</span><br><span class="line">sock1.index=months</span><br><span class="line"># print(sock1)</span><br><span class="line">print(sock1.groupby(sock1.index)[&apos;close&apos;].mean())</span><br><span class="line">#</span><br><span class="line">#&lt;参考答案&gt;</span><br><span class="line">print(&apos;==============================================================================&apos;)</span><br><span class="line"># import tushare as ts</span><br><span class="line"># import numpy as np</span><br><span class="line"># 1</span><br><span class="line">df = ts.get_hist_data(&apos;600036&apos;, start = &apos;2018-06-01&apos;, end = &apos;2018-12-31&apos;)</span><br><span class="line">df = df.iloc[:, :5] # 获取前 5 列</span><br><span class="line">df.sort_index(inplace = True) # 按 date 列进行排序</span><br><span class="line">print(df)</span><br><span class="line"># 2</span><br><span class="line">min_day = df.sort_values(&apos;volume&apos;).iloc[0,]</span><br><span class="line">min_volume = min_day.volume</span><br><span class="line">min_volume_date = min_day.name</span><br><span class="line">print(&quot;the min volume of &#123;&#125; is at &#123;&#125;&quot;.format(min_volume, min_volume_date))</span><br><span class="line">max_day = df.sort_values(&apos;volume&apos;).iloc[-1,]</span><br><span class="line">max_volume = max_day.volume</span><br><span class="line">max_volume_date = max_day.name</span><br><span class="line">print(&quot;the max volume of &#123;&#125; is at &#123;&#125;&quot;.format(max_volume, max_volume_date))</span><br><span class="line"># 3</span><br><span class="line">print(df[df.volume &gt;= 1000000])</span><br><span class="line"># 4</span><br><span class="line">print(len(df[df.close &gt; df.open]))</span><br><span class="line"># 5</span><br><span class="line">print(df.open.diff())</span><br><span class="line">print(np.sign(np.diff(df.open)))</span><br><span class="line"># 6</span><br><span class="line">month = [item[5:7] for item in df.index]</span><br><span class="line">print(df.close.groupby(month).apply(np.mean))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="python" scheme="https://ahpuchend.github.io/categories/python/"/>
    
    
      <category term="nju用python玩转数据" scheme="https://ahpuchend.github.io/tags/nju%E7%94%A8python%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>第四周-字典练习题</title>
    <link href="https://ahpuchend.github.io/2019/09/27/%E7%AC%AC%E5%9B%9B%E5%91%A8-%E5%AD%97%E5%85%B8%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://ahpuchend.github.io/2019/09/27/第四周-字典练习题/</id>
    <published>2019-09-27T06:57:11.000Z</published>
    <updated>2019-09-27T07:22:45.674Z</updated>
    
    <content type="html"><![CDATA[<p>题一：用字典创建一个平台的用户信息（包含用户名和密码）管理系统，新用户可以用与现有系统帐号不冲突的用户名创建帐号，已存在的老用户则可以用用户名和密码登陆重返系统。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">userdict = &#123;&apos;chendong&apos;: &apos;1234&apos;, &apos;chenjuan&apos;: &apos;5678&apos;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def newusers():</span><br><span class="line">    name = input(&apos;enter your name: &apos;)</span><br><span class="line">    if name in userdict.keys():</span><br><span class="line">        newusers()</span><br><span class="line">    else:</span><br><span class="line">        psw = input(&apos;enter your password: &apos;)</span><br><span class="line">        userdict[name] = psw</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def oldusers():</span><br><span class="line">    uinfo = input(&apos;enter your name and password: &apos;)</span><br><span class="line">    print(uinfo)</span><br><span class="line">    user=uinfo.split(&apos;,&apos;)</span><br><span class="line">    name,password=user</span><br><span class="line">    print(name,password)</span><br><span class="line">    if password in userdict.values():</span><br><span class="line">        print(name, &apos;welcome back &apos;)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;login incorrect&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login():</span><br><span class="line">    option = input(&apos;enter a option(N or O or E): &apos;)</span><br><span class="line">    if option == &apos;N&apos;:</span><br><span class="line">        newusers()</span><br><span class="line">    if option == &apos;O&apos;:</span><br><span class="line">        oldusers()</span><br><span class="line">    if option == &apos;E&apos;:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    login()</span><br><span class="line">    print(userdict)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>题二：统计词频：输入一个长句子，句子只含,|.|?|”|’这几种标点，统计每个单词出现的频率。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">with open(&apos;sentense.txt&apos;, &apos;r+&apos;) as f:</span><br><span class="line">    txt = f.read()</span><br><span class="line">    txt = txt.lower()</span><br><span class="line">pattern = re.compile(&quot;\,|\.|\&quot;|\&apos;|\!&quot;)</span><br><span class="line">sentense = re.sub(pattern, &apos; &apos;, txt)</span><br><span class="line"># print(sentense)</span><br><span class="line">words = sentense.split(&apos; &apos;)</span><br><span class="line">##清洗words,去掉&apos;&apos;,</span><br><span class="line">clswords = []</span><br><span class="line"># print(words)</span><br><span class="line">for word in words:</span><br><span class="line">    if word == &apos;&apos;:</span><br><span class="line">        continue</span><br><span class="line">    else:</span><br><span class="line">        clswords.append(word)</span><br><span class="line">setwords = set(clswords)</span><br><span class="line">listwords = list(setwords)</span><br><span class="line">wordfreq = [0] * len(listwords)</span><br><span class="line">for i in range(len(listwords)):</span><br><span class="line">    wordfreq[i] = clswords.count(listwords[i])</span><br><span class="line">worddiction = dict(zip(listwords, wordfreq))</span><br><span class="line">print(worddiction, len(worddiction))</span><br><span class="line">print(sum(worddiction.values()))</span><br></pre></td></tr></table></figure></p><p>sentence.txt:hi,boy. Don’t worry,have good night ! tomorrow must be a sunny day. “emmm….”,sounds like pretty. ok, I will go to bed. “see you tomorrow,have a good night”.a,a,a,a,a,a,a,a,a.</p><p>题三：给定一个整数数组 nums 和一个目标值 target，<br>请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标<br>若存在，只要返回一组，且其中一个数字尽量小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def townum_sum(n,lst):</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    for i in range(len(lst)):</span><br><span class="line">        d[lst[i]]=i</span><br><span class="line">    for i in range(len(lst)):</span><br><span class="line">        if n-lst[i] in d.keys():</span><br><span class="line">            return i,d[n-lst[i]]</span><br><span class="line">    return -1</span><br><span class="line"></span><br><span class="line">if __name__== &apos;__main__&apos;:</span><br><span class="line">    target=int(input(&apos;enter a num: &apos;))</span><br><span class="line">    nums=[1,4,5,6,7,8,9,10,11,12,13,15,18,19,20,21,29,34,54,65]</span><br><span class="line">    result=townum_sum(target,nums)</span><br><span class="line">    if result == -1:</span><br><span class="line">        print(&apos;not find&apos;)</span><br><span class="line">    else:</span><br><span class="line">        print(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题一：用字典创建一个平台的用户信息（包含用户名和密码）管理系统，新用户可以用与现有系统帐号不冲突的用户名创建帐号，已存在的老用户则可以用用户名和密码登陆重返系统。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;userdict = &amp;#123;&amp;apos;chendong&amp;apos;: &amp;apos;1234&amp;apos;, &amp;apos;chenjuan&amp;apos;: &amp;apos;5678&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def newusers():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = input(&amp;apos;enter your name: &amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if name in userdict.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newusers()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        psw = input(&amp;apos;enter your password: &amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        userdict[name] = psw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def oldusers():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uinfo = input(&amp;apos;enter your name and password: &amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(uinfo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user=uinfo.split(&amp;apos;,&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name,password=user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(name,password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if password in userdict.values():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(name, &amp;apos;welcome back &amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;apos;login incorrect&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def login():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    option = input(&amp;apos;enter a option(N or O or E): &amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if option == &amp;apos;N&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newusers()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if option == &amp;apos;O&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        oldusers()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if option == &amp;apos;E&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    login()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(userdict)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://ahpuchend.github.io/categories/python/"/>
    
    
      <category term="nju用python玩转数据" scheme="https://ahpuchend.github.io/tags/nju%E7%94%A8python%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>第三周-数据表示与获取基础编程作业</title>
    <link href="https://ahpuchend.github.io/2019/09/26/%E7%AC%AC%E4%B8%89%E5%91%A8-%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA%E4%B8%8E%E8%8E%B7%E5%8F%96%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    <id>https://ahpuchend.github.io/2019/09/26/第三周-数据表示与获取基础编程作业/</id>
    <published>2019-09-26T14:36:47.000Z</published>
    <updated>2019-09-27T07:22:30.378Z</updated>
    
    <content type="html"><![CDATA[<p>MOOC链接  <a href="https://www.icourse163.org/course/NJU-1001571005?tid=1206020206" target="_blank" rel="noopener">用python玩转数据</a></p><p>题一:从键盘输入整数n（1-9之间），对于1-100之间的整数删除包含n并且能被n整除的数，<br>例如如果n为6，则要删掉包含6的如6，16这样的数及是6的倍数的如12和18这样的数，<br>输出所有满足条件的数，要求每满10个数换行。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">def Me():</span><br><span class="line">    num=int(input(&apos;enter a num (1-100):&apos;))</span><br><span class="line">    strnum=str(num)</span><br><span class="line">    j=1</span><br><span class="line">    for i in range(1,101):</span><br><span class="line">        if strnum in str(i):</span><br><span class="line">            continue</span><br><span class="line">        if i%num == 0:</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            if j%10==0:</span><br><span class="line">                print(i)</span><br><span class="line">                j=1</span><br><span class="line">            else:</span><br><span class="line">                print(i,end=&apos;,&apos;)</span><br><span class="line">                j+=1</span><br><span class="line"></span><br><span class="line">            # if j&lt;10:</span><br><span class="line">            #     print(i,end=&apos;,&apos;)</span><br><span class="line">            #     j+=1</span><br><span class="line">            # else:</span><br><span class="line">            #     print(i)</span><br><span class="line">            #     j=1</span><br><span class="line"></span><br><span class="line">#比Teach()多一个字符</span><br><span class="line"></span><br><span class="line">def Teach():</span><br><span class="line">    n = int(input(&quot;Enter the number: &quot;))</span><br><span class="line">    count = 0</span><br><span class="line">    new_str = &apos;&apos;</span><br><span class="line">    print(&quot;The result string: &quot;)</span><br><span class="line">    for i in range(101):</span><br><span class="line">        s = str(i)</span><br><span class="line">        if i % n != 0 and s.find(str(n)) == -1:</span><br><span class="line">            new_str = new_str + s + &apos;,&apos;</span><br><span class="line">            count += 1</span><br><span class="line">            if count % 10 == 0:</span><br><span class="line">                print(new_str[:-1])</span><br><span class="line">                new_str = &apos;&apos;</span><br><span class="line">    if len(new_str) &gt; 0:</span><br><span class="line">        print(new_str[:-1])</span><br></pre></td></tr></table></figure><p>题二:请用随机函数产生500行1-100之间的随机整数存入文件random.txt中，<br>编程寻找这些整数的众数并输出，众数即为一组数中出现最多的数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import random,time</span><br><span class="line">def modeNum():</span><br><span class="line">    with open(&apos;random.txt&apos;,&apos;w+&apos;,encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">        # num = []</span><br><span class="line">        for i in range(500):</span><br><span class="line">            num=random.randint(1,100)</span><br><span class="line">            f.write(str(num)+&apos;\n&apos;)</span><br><span class="line">        # f.seek(0)</span><br><span class="line">        # text=f.read()</span><br><span class="line">        # lists=text.split(&apos;\n&apos;)</span><br><span class="line">        # print(lists[:-1]) ##变成列表</span><br><span class="line">        f.seek(0)</span><br><span class="line">        nums=f.readlines()</span><br><span class="line">        nums=[int(num.strip()) for num in nums]</span><br><span class="line">        setNums=set(nums)</span><br><span class="line">        lst = [0] * 101</span><br><span class="line">        for num in setNums:</span><br><span class="line">            c = nums.count(num)</span><br><span class="line">            lst[int(num)] = c</span><br><span class="line"></span><br><span class="line">        # 法一找众数和出现次数</span><br><span class="line">        index = lst.index(max(lst))</span><br><span class="line">        print(index, max(lst))</span><br><span class="line"></span><br><span class="line">        #法二找众数和出现次数</span><br><span class="line">        # for i in range(len(lst)):</span><br><span class="line">        #     if lst[i] == max(lst):</span><br><span class="line">        #         print(i,max(lst))</span><br><span class="line"></span><br><span class="line">        # 法三找众数和出现次数</span><br><span class="line">        # lst1=[0]*101</span><br><span class="line">        # for i in nums:</span><br><span class="line">        #     lst1[int(i)]+=1</span><br><span class="line">        # index=lst1.index(max(lst1))</span><br><span class="line">        # print(index,max(lst1))</span><br><span class="line"></span><br><span class="line"># modeNum()</span><br></pre></td></tr></table></figure><p>题三:文件article.txt中存放了一篇英文文章（请自行创建并添加测试文本），<br>假设文章中的标点符号仅包括“,”、“.”、“!”、“?”和“…”，<br>编程找出其中最长的单词并输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">with open(&apos;article.txt&apos;,&apos;r+&apos;) as fp:</span><br><span class="line">    text=fp.readlines()</span><br><span class="line">    text=[str.strip() for str in text]</span><br><span class="line">    print(text)</span><br><span class="line">    list=&apos; &apos;.join(text)</span><br><span class="line">    print(list)</span><br><span class="line">    pattern=re.compile(&apos;\,|\.|\?|\!&apos;)</span><br><span class="line">    lists=re.sub(pattern,&apos; &apos;,list)</span><br><span class="line">    print(lists,type(lists))</span><br><span class="line">    words=lists.split(&apos; &apos;)</span><br><span class="line">    print(words)</span><br><span class="line">    maxlen=len(words[0])</span><br><span class="line">    for i,w in enumerate(words):</span><br><span class="line">        if len(w)&gt;maxlen:</span><br><span class="line">            maxlen=len(w)</span><br><span class="line">            index=i</span><br><span class="line">    print(index,words[index],maxlen)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MOOC链接  &lt;a href=&quot;https://www.icourse163.org/course/NJU-1001571005?tid=1206020206&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用python玩转数据&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题一:从键盘输入整数n（1-9之间），对于1-100之间的整数删除包含n并且能被n整除的数，&lt;br&gt;例如如果n为6，则要删掉包含6的如6，16这样的数及是6的倍数的如12和18这样的数，&lt;br&gt;输出所有满足条件的数，要求每满10个数换行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://ahpuchend.github.io/categories/python/"/>
    
    
      <category term="nju用python玩转数据" scheme="https://ahpuchend.github.io/tags/nju%E7%94%A8python%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>寻找众数</title>
    <link href="https://ahpuchend.github.io/2019/09/25/%E5%AF%BB%E6%89%BE%E4%BC%97%E6%95%B0/"/>
    <id>https://ahpuchend.github.io/2019/09/25/寻找众数/</id>
    <published>2019-09-25T13:23:08.000Z</published>
    <updated>2019-09-27T07:23:20.941Z</updated>
    
    <content type="html"><![CDATA[<p>题目：给定一个序列，寻找序列中出现最多的数字，我们称这样的数字为该序列的“众数” 如[2,3,1,1,1]序列的众数为1</p><p><b> 法一：一般方法 时间 O(nlog(n)) 空间为不重复的数字数，建立一个二叉排序树，做统计。</b></p><p><b>法二：时空 O(n)方法:只适合在确定数字的范围时，且范围较小，可以开同样大的数组，遍历一边，一边遍历一边做统计</b></p><a id="more"></a><h1 id="法一code："><a href="#法一code：" class="headerlink" title="法一code："></a>法一code：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">a = [6, 1, 8, 7, 9, 4, 4, 4, 6, 7,7,6,7,7,7]</span><br><span class="line"></span><br><span class="line">class Node:</span><br><span class="line">    def __init__(self, data):</span><br><span class="line">        self.count = 1</span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = None</span><br><span class="line">        self.rchild = None</span><br><span class="line"></span><br><span class="line">def search(header, node):</span><br><span class="line"></span><br><span class="line">    if not header:</span><br><span class="line">        header=node</span><br><span class="line">        return header</span><br><span class="line">    if node.data == header.data:</span><br><span class="line">        header.count += 1</span><br><span class="line">    if node.data &lt; header.data:</span><br><span class="line">        lnode=search(header.lchild, node)</span><br><span class="line">        header.lchild=lnode</span><br><span class="line">    if node.data &gt; header.data:</span><br><span class="line">        rnode=search(header.rchild, node)</span><br><span class="line">        header.rchild=rnode</span><br><span class="line">    return header</span><br><span class="line"># 建立二叉排序树</span><br><span class="line">def creatTree():</span><br><span class="line">    header = Node(a[0])</span><br><span class="line">    for i in a[1:]:</span><br><span class="line">        node = Node(i)</span><br><span class="line">        root=search(header, node)</span><br><span class="line">    return header</span><br><span class="line"></span><br><span class="line">lists=[]</span><br><span class="line"># 遍历二叉树,求众数</span><br><span class="line">def getModenum(header):</span><br><span class="line">    if header:</span><br><span class="line">        dict = &#123;&apos;data&apos;:0, &apos;count&apos;:1&#125;</span><br><span class="line">        dict[&apos;data&apos;]=header.data</span><br><span class="line">        dict[&apos;count&apos;]=header.count</span><br><span class="line">        lists.append(dict)</span><br><span class="line">        getModenum(header.lchild)</span><br><span class="line">        getModenum(header.rchild)</span><br><span class="line">    return lists</span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    header=creatTree()</span><br><span class="line">    lis=getModenum(header)</span><br><span class="line">    modenum = lis[0]</span><br><span class="line">    for li in lis:</span><br><span class="line">        if(li[&apos;count&apos;]&gt;modenum[&apos;count&apos;]):</span><br><span class="line">            modenum=li</span><br><span class="line">    print(&apos;modenum is:&apos;)</span><br><span class="line">    print(modenum,modenum[&apos;data&apos;],modenum[&apos;count&apos;])</span><br></pre></td></tr></table></figure><h1 id="法二code"><a href="#法二code" class="headerlink" title="法二code:"></a>法二code:</h1><p><b>假设数字的范围为1-10，我们先开大小9的数组，然后顺序遍历一次，统计数字个数。</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a = [6, 1, 8, 7, 9, 4, 4, 4, 6, 7,7,6,7,7,7]</span><br><span class="line">class Array:</span><br><span class="line">    def __init__(self,i):</span><br><span class="line">        self.index=i</span><br><span class="line">        self.count=0</span><br><span class="line">#开了大小9个“数组”</span><br><span class="line">def buildMap():</span><br><span class="line">    arrays=[Array(i+1) for i in range(0,10)]</span><br><span class="line">    print(arrays)</span><br><span class="line">    for i in a:</span><br><span class="line">        # print(i)</span><br><span class="line">        arrays[i-1].count+=1</span><br><span class="line">    return arrays</span><br><span class="line"></span><br><span class="line">def getModenum(arrays):</span><br><span class="line">    modenum=arrays[0]</span><br><span class="line">    for arr in arrays:</span><br><span class="line">        print(arr.index,arr.count)</span><br><span class="line">        if arr.count&gt;modenum.count:</span><br><span class="line">            modenum=arr</span><br><span class="line">    print(modenum.index,modenum.count)</span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    As=buildMap()</span><br><span class="line">    getModenum(As)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：给定一个序列，寻找序列中出现最多的数字，我们称这样的数字为该序列的“众数” 如[2,3,1,1,1]序列的众数为1&lt;/p&gt;&lt;p&gt;&lt;b&gt; 法一：一般方法 时间 O(nlog(n)) 空间为不重复的数字数，建立一个二叉排序树，做统计。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;法二：时空 O(n)方法:只适合在确定数字的范围时，且范围较小，可以开同样大的数组，遍历一边，一边遍历一边做统计&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="algorithm" scheme="https://ahpuchend.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>第三周-python爬虫小项目作业</title>
    <link href="https://ahpuchend.github.io/2019/09/25/%E7%AC%AC%E4%B8%89%E5%91%A8-%E7%88%AC%E8%99%AB%E7%88%AC%E8%99%AB%E5%B0%8F%E9%A1%B9%E7%9B%AE%E4%BD%9C%E4%B8%9A/"/>
    <id>https://ahpuchend.github.io/2019/09/25/第三周-爬虫爬虫小项目作业/</id>
    <published>2019-09-25T12:37:26.000Z</published>
    <updated>2019-09-27T07:22:14.339Z</updated>
    
    <content type="html"><![CDATA[<p>这个是南京大学MOOC &lt;用python玩转数据&gt;的第三周python小项目作业题<br><a href="https://www.icourse163.org/course/NJU-1001571005?tid=1206020206" target="_blank" rel="noopener">用python玩转数据</a></p><h1 id="作业一："><a href="#作业一：" class="headerlink" title="作业一："></a>作业一：</h1><p>题目：爬取豆瓣的随便一本书的前50热评，并计算所用评分的平均值（注意：有的评论下无评分）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests,re,os,time</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">def crawler():</span><br><span class="line">    html = []</span><br><span class="line">    url=&quot;https://book.douban.com/subject/2567698/comments/hot?p=&quot;</span><br><span class="line">    for i in range(3):</span><br><span class="line">        re=requests.get(url+str(i+1))</span><br><span class="line">        html.append(re.text)</span><br><span class="line">        time.sleep(5)</span><br><span class="line">    html=&apos; &apos;.join(html)</span><br><span class="line">    return html</span><br><span class="line"></span><br><span class="line">def parse(html):</span><br><span class="line">    comments=[]</span><br><span class="line">    grades=[]</span><br><span class="line">    soup=BeautifulSoup(html,&apos;lxml&apos;)</span><br><span class="line">    commenttags=soup.select(&quot;.short&quot;)</span><br><span class="line">    for comment in commenttags:</span><br><span class="line">        comments.append(comment.string)</span><br><span class="line">    starttags=soup.select(&quot;.user-stars&quot;)</span><br><span class="line">    for start in starttags:</span><br><span class="line">        #提取评分</span><br><span class="line">        grade=int(&apos; &apos;.join(start[&apos;class&apos;]).split(&apos; &apos;)[1][7:])</span><br><span class="line">        grades.append(grade)</span><br><span class="line">    mean=sum(grades)/len(grades)</span><br><span class="line">    return comments,mean</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    html=crawler()</span><br><span class="line">    allcomments,mean=parse(html)</span><br><span class="line">    print(mean)</span><br><span class="line">    for comment in allcomments:</span><br><span class="line">        print(comment)</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="作业二："><a href="#作业二：" class="headerlink" title="作业二："></a>作业二：</h1><p>题目：在 “<a href="http://money.cnn.com/data/dow30/”" target="_blank" rel="noopener">http://money.cnn.com/data/dow30/”</a> 上抓取道指成分股数据并将30家公司的代码、公司名称和最近一次成交价放到一个列表中输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">def retrieve_dji_list():</span><br><span class="line">    r = requests.get(&apos;http://money.cnn.com/data/dow30/&apos;)</span><br><span class="line">    # put the re expression on one line and pay attention to the &apos;\n&apos;</span><br><span class="line">    search_pattern = re.compile(&apos;class=&quot;wsod_symbol&quot;&gt;(.*?)&lt;\/a&gt;.*?&lt;span.*?&quot;&gt;(.*?)&lt;\/span&gt;.*?\n.*?class=&quot;wsod_stream&quot;&gt;(.*?)&lt;\/span&gt;&apos;)</span><br><span class="line">    dji_list_in_text = re.findall(search_pattern, r.text)</span><br><span class="line">    return dji_list_in_text</span><br><span class="line">dji_list = retrieve_dji_list()</span><br><span class="line">print(dji_list)</span><br></pre></td></tr></table></figure><p>Note:这个代码时老师给的参考答案</p><h1 id="作业三"><a href="#作业三" class="headerlink" title="作业三:"></a>作业三:</h1><p>请爬取网页（ <a href="http://www.volleyball.world/en/vnl/2018/women/results-and-ranking/round1" target="_blank" rel="noopener">http://www.volleyball.world/en/vnl/2018/women/results-and-ranking/round1</a> ）上的数据（包括TEAMS and TOTAL, WON, LOST of MATCHES）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests,re</span><br><span class="line">def crawler(url):</span><br><span class="line">    r=requests.get(url)</span><br><span class="line">    pattern=re.compile(&apos;href=&quot;/en/vnl/2018/women/teams/.*?&gt;(.*?)&lt;\/a&gt;\s*&lt;/figcaption&gt;\s*&lt;/figure&gt;\s*&lt;\/td&gt;\s*.*?(\d+)&lt;\/td&gt;\s*.*?(\d+)&lt;\/td&gt;\s*.*?(\d+)&lt;\/td&gt;&apos;)</span><br><span class="line">    lis=re.findall(pattern,r.text)</span><br><span class="line">    return lis</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    url=&quot;http://www.volleyball.world/en/vnl/2018/women/results-and-ranking/round1&quot;</span><br><span class="line">    lis=crawler(url)</span><br><span class="line">    print(lis,len(lis))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个是南京大学MOOC &amp;lt;用python玩转数据&amp;gt;的第三周python小项目作业题&lt;br&gt;&lt;a href=&quot;https://www.icourse163.org/course/NJU-1001571005?tid=1206020206&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用python玩转数据&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;作业一：&quot;&gt;&lt;a href=&quot;#作业一：&quot; class=&quot;headerlink&quot; title=&quot;作业一：&quot;&gt;&lt;/a&gt;作业一：&lt;/h1&gt;&lt;p&gt;题目：爬取豆瓣的随便一本书的前50热评，并计算所用评分的平均值（注意：有的评论下无评分）&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import requests,re,os,time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from bs4 import BeautifulSoup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def crawler():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url=&amp;quot;https://book.douban.com/subject/2567698/comments/hot?p=&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for i in range(3):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        re=requests.get(url+str(i+1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        html.append(re.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html=&amp;apos; &amp;apos;.join(html)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def parse(html):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    comments=[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grades=[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    soup=BeautifulSoup(html,&amp;apos;lxml&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    commenttags=soup.select(&amp;quot;.short&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for comment in commenttags:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        comments.append(comment.string)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    starttags=soup.select(&amp;quot;.user-stars&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for start in starttags:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #提取评分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        grade=int(&amp;apos; &amp;apos;.join(start[&amp;apos;class&amp;apos;]).split(&amp;apos; &amp;apos;)[1][7:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        grades.append(grade)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mean=sum(grades)/len(grades)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return comments,mean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__==&amp;quot;__main__&amp;quot;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html=crawler()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allcomments,mean=parse(html)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(mean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for comment in allcomments:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(comment)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://ahpuchend.github.io/categories/python/"/>
    
    
      <category term="nju用python玩转数据" scheme="https://ahpuchend.github.io/tags/nju%E7%94%A8python%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
